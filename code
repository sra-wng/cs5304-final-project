{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "\n",
    "data_2017 = pd.read_csv(r'OSMI 2017 Data.csv')\n",
    "data_2018 = pd.read_csv(r'OSMI 2018 Data.csv')\n",
    "data_2019 = pd.read_csv(r'OSMI 2019 Data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initial Cleaning and Formatting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Drop Rows 753 and 755 in data_2017 due to high prevalance of nan entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2017.drop([753,755],inplace=True,axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Convert 2019 True/False to 1/0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2019['Is your employer primarily a tech company/organization?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                for entry in  data_2019['Is your employer primarily a tech company/organization?']]\n",
    "data_2019['Is your primary role within your company related to tech/IT?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                for entry in  data_2019['Is your primary role within your company related to tech/IT?']]\n",
    "data_2019['Have you ever discussed your mental health with your employer?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                for entry in data_2019['Have you ever discussed your mental health with your employer?']]\n",
    "data_2019['Have you ever discussed your mental health with coworkers?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                for entry in  data_2019['Have you ever discussed your mental health with coworkers?']]\n",
    "data_2019['Have you ever had a coworker discuss their or another coworker\\'s mental health with you?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                for entry in  data_2019['Have you ever had a coworker discuss their or another coworker\\'s mental health with you?']]\n",
    "data_2019[ 'Do you have medical coverage (private insurance or state-provided) that includes treatment of mental health disorders?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                for entry in data_2019[ 'Do you have medical coverage (private insurance or state-provided) that includes treatment of mental health disorders?']]\n",
    "data_2019['Have you ever sought treatment for a mental health disorder from a mental health professional?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                 for entry in data_2019['Have you ever sought treatment for a mental health disorder from a mental health professional?']]\n",
    "data_2019['Are you openly identified at work as a person with a mental health issue?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                 for entry in data_2019['Are you openly identified at work as a person with a mental health issue?']]\n",
    "data_2019['Has being identified as a person with a mental health issue affected your career?'] = \\\n",
    "                [1 if entry == True else 0 if entry == False else math.nan \\\n",
    "                 for entry in data_2019['Has being identified as a person with a mental health issue affected your career?']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Rename Columns That are Logically the Same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2019=data_2019.rename(columns={'*Are you self-employed?*':'<strong>Are you self-employed?</strong>', \n",
    "                                    '*Do you have previous employers?*':'<strong>Do you have previous employers?</strong>',\n",
    "                                    'Have you observed or experienced an *unsupportive or badly handled response* to a mental health issue in your current or previous workplace?':'<strong>Have you observed or experienced an unsupportive or badly handled response to a mental health issue in your current or previous workplace?</strong>', \n",
    "                                    'Have you observed or experienced a *supportive or well handled response* to a mental health issue in your current or previous workplace?':'<strong>Have you observed or experienced supportive or well handled response to a mental health issue in your current or previous workplace?</strong>',\n",
    "                                    'Have your previous employers provided mental health benefits?':'<strong>Have your previous employers provided mental health benefits?</strong>',\n",
    "                                    'What US state or territory do you *live* in?':'What US state or territory do you <strong>live</strong> in?',\n",
    "                                    'What US state or territory do you *work* in?':'What US state or territory do you <strong>work</strong> in?',\n",
    "                                    'What country do you *live* in?':'What country do you <strong>live</strong> in?',\n",
    "                                    'What country do you *work* in?':'What country do you <strong>work</strong> in?',\n",
    "                                    'If you have been diagnosed or treated for a mental health disorder, do you ever reveal this to clients or business contacts?':'<strong>If you have been diagnosed or treated for a mental health disorder, do you ever reveal this to clients or business contacts?</strong>',\n",
    "                                    'If you have been diagnosed or treated for a mental health disorder, do you ever reveal this to coworkers or employees?':'<strong>If you have been diagnosed or treated for a mental health disorder, do you ever reveal this to coworkers or employees?</strong>'})\n",
    "data_2019=data_2019.rename(columns={'Do you *currently* have a mental health disorder?':'Do you currently have a mental health disorder?',\n",
    "                                              'Does your employer provide mental health benefits as part of healthcare coverage?':'Does your employer provide mental health benefits as part of healthcare coverage?',\n",
    "                                              'Have you ever been *diagnosed* with a mental health disorder?':'Have you ever been diagnosed with a mental health disorder?',\n",
    "                                              'If they knew you suffered from a mental health disorder, how do you think that your team members/co-workers would react?':'If they knew you suffered from a mental health disorder, how do you think that team members/co-workers would react?',\n",
    "                                              'If you have a mental health disorder, how often do you feel that it interferes with your work *when being treated effectively?*':'If you have a mental health disorder, how often do you feel that it interferes with your work <strong>when being treated effectively?</strong>',\n",
    "                                              'If you have a mental health disorder, how often do you feel that it interferes with your work *when* _*NOT*_* being treated effectively (i.e., when you are experiencing symptoms)?*':'If you have a mental health disorder, how often do you feel that it interferes with your work <strong>when</strong> <em><strong>NOT</strong></em><strong> being treated effectively (i.e., when you are experiencing symptoms)?</strong>',\n",
    "                                              'Would you bring up your *mental* health with a potential employer in an interview?':'Would you bring up your mental health with a potential employer in an interview?'})\n",
    "data_2017=data_2017.rename(columns={data_2017.columns[5]:'Does your employer provide mental health benefits as part of healthcare coverage?',\n",
    "                                    data_2017.columns[103]:'If they knew you suffered from a mental health disorder, how do you think that team members/co-workers would react?',\n",
    "                                    data_2017.columns[93]:'If you have a mental health disorder, how often do you feel that it interferes with your work <strong>when</strong> <em><strong>NOT</strong></em><strong> being treated effectively (i.e., when you are experiencing symptoms)?</strong>'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Add a Year Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2017['Year'] = data_2017.apply(lambda x: '2017',axis=1)\n",
    "data_2018['Year'] = data_2018.apply(lambda x: '2018',axis=1)\n",
    "data_2019['Year'] = data_2019.apply(lambda x: '2019',axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Process Diagnosis Columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2017 & 2018 Diagnosis Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop columns associated with 'what disorders have you been diagnosed with?' due to no responses\n",
    "drop_cols=['Anxiety Disorder (Generalized, Social, Phobia, etc)',\n",
    "            'Mood Disorder (Depression, Bipolar Disorder, etc)',\n",
    "            'Psychotic Disorder (Schizophrenia, Schizoaffective, etc)',\n",
    "            'Eating Disorder (Anorexia, Bulimia, etc)',\n",
    "            'Attention Deficit Hyperactivity Disorder',\n",
    "            'Personality Disorder (Borderline, Antisocial, Paranoid, etc)',\n",
    "            'Obsessive-Compulsive Disorder',\n",
    "            'Post-Traumatic Stress Disorder',\n",
    "            'Stress Response Syndromes',\n",
    "            'Dissociative Disorder',\n",
    "            'Substance Use Disorder',\n",
    "            'Addictive Disorder',\n",
    "            'Other']\n",
    "\n",
    "for x in drop_cols:\n",
    "    data_2017.drop(x,inplace=True,axis=1)\n",
    "    data_2018.drop(x,inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Keep and rename remaining disorder columns with abbreviations\n",
    "    # Columns associated with 'If possibly, what disorder(s) do you believe you have?' --> possCurrMhd_\n",
    "         # Stems from 'do you currently have a mental health disorder?' = possibly\n",
    "    # Columns associated with 'If so, what disorder(s) were you diagnosed with?' --> diagMhd_\n",
    "        # Stems from 'have you ever been diagnosed with a mental health disorder?' = yes\n",
    "\n",
    "#question set 1: 'If possibly, what disorder(s) do you believe you have?'\n",
    "orig_cols1=['Anxiety Disorder (Generalized, Social, Phobia, etc).1',\\\n",
    "            'Mood Disorder (Depression, Bipolar Disorder, etc).1',\\\n",
    "            'Psychotic Disorder (Schizophrenia, Schizoaffective, etc).1',\\\n",
    "            'Eating Disorder (Anorexia, Bulimia, etc).1',\\\n",
    "            'Attention Deficit Hyperactivity Disorder.1',\\\n",
    "            'Personality Disorder (Borderline, Antisocial, Paranoid, etc).1',\\\n",
    "            'Obsessive-Compulsive Disorder.1',\\\n",
    "            'Post-traumatic Stress Disorder',\\\n",
    "            'Stress Response Syndromes.1',\\\n",
    "            'Dissociative Disorder.1',\\\n",
    "            'Substance Use Disorder.1',\\\n",
    "            'Addictive Disorder.1',\\\n",
    "            'Other.1']\n",
    "new_names1=['possCurrMhd_Anxiety',\\\n",
    "            'possCurrMhd_Mood',\\\n",
    "            'possCurrMhd_Psychotic',\\\n",
    "            'possCurrMhd_Eating',\\\n",
    "            'possCurrMhd_Attention',\\\n",
    "            'possCurrMhd_Personality',\\\n",
    "            'possCurrMhd_Ocd',\\\n",
    "            'possCurrMhd_Ptsd',\\\n",
    "            'possCurrMhd_StressResponse',\\\n",
    "            'possCurrMhd_Dissociative',\\\n",
    "            'possCurrMhd_SubstanceUse',\\\n",
    "            'possCurrMhd_Addictive',\\\n",
    "            'possCurrMhd_Other']\n",
    "\n",
    "for x in orig_cols1:\n",
    "    ix=orig_cols1.index(x)\n",
    "    data_2017.rename(columns={x: new_names1[ix]},inplace=True)\n",
    "    data_2018.rename(columns={x: new_names1[ix]},inplace=True)\n",
    "    \n",
    "#question set 2: 'If so, what disorder(s) were you diagnosed with?'\n",
    "orig_cols2=['Anxiety Disorder (Generalized, Social, Phobia, etc).2',\\\n",
    "            'Mood Disorder (Depression, Bipolar Disorder, etc).2',\\\n",
    "            'Psychotic Disorder (Schizophrenia, Schizoaffective, etc).2',\\\n",
    "            'Eating Disorder (Anorexia, Bulimia, etc).2',\\\n",
    "            'Attention Deficit Hyperactivity Disorder.2',\\\n",
    "            'Personality Disorder (Borderline, Antisocial, Paranoid, etc).2',\\\n",
    "            'Obsessive-Compulsive Disorder.2',\\\n",
    "            'Post-traumatic Stress Disorder.1',\\\n",
    "            'Stress Response Syndromes.2',\\\n",
    "            'Dissociative Disorder.2',\\\n",
    "            'Substance Use Disorder.2',\\\n",
    "            'Addictive Disorder.2',\\\n",
    "            'Other.2']\n",
    "new_names2=['diagMhd_Anxiety',\\\n",
    "            'diagMhd_Mood',\\\n",
    "            'diagMhd_Psychotic',\\\n",
    "            'diagMhd_Eating',\\\n",
    "            'diagMhd_Attention',\\\n",
    "            'diagMhd_Personality',\\\n",
    "            'diagMhd_Ocd',\\\n",
    "            'diagMhd_Ptsd',\\\n",
    "            'diagMhd_StressResponse',\\\n",
    "            'diagMhd_Dissociative',\\\n",
    "            'diagMhd_SubstanceUse',\\\n",
    "            'diagMhd_Addictive',\\\n",
    "            'diagMhd_Other']\n",
    "\n",
    "for x in orig_cols2:\n",
    "    ix=orig_cols2.index(x)\n",
    "    data_2017.rename(columns={x: new_names2[ix]},inplace=True)\n",
    "    data_2018.rename(columns={x: new_names2[ix]},inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2019 Diagnosis Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop '*What disorder(s) have you been diagnosed with?*' due to no responses\n",
    "col='*What disorder(s) have you been diagnosed with?*'\n",
    "#print(data_2019['*What disorder(s) have you been diagnosed with?*'].unique())\n",
    "data_2019.drop(col,inplace=True,axis=1)\n",
    "\n",
    "#rename:\n",
    "# '*If possibly, what disorder(s) do you believe you have?*' --> possCurrMhd\n",
    "# '*If so, what disorder(s) were you diagnosed with?*' --> diagMhd\n",
    "data_2019.rename(columns={'*If possibly, what disorder(s) do you believe you have?*': 'possCurrMhd',\\\n",
    "                          '*If so, what disorder(s) were you diagnosed with?*':'diagMhd'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "vals=['Anxiety Disorder (Generalized, Social, Phobia, etc)',\n",
    "        'Mood Disorder (Depression, Bipolar Disorder, etc)',\n",
    "        'Psychotic Disorder (Schizophrenia, Schizoaffective, etc)',\n",
    "        'Eating Disorder (Anorexia, Bulimia, etc)',\n",
    "        'Attention Deficit Hyperactivity Disorder',\n",
    "        'Personality Disorder (Borderline, Antisocial, Paranoid, etc)',\n",
    "        'Obsessive-Compulsive Disorder',\n",
    "        'Post-traumatic Stress Disorder',\n",
    "        'Stress Response Syndromes',\n",
    "        'Dissociative Disorder',\n",
    "        'Substance Use Disorder',\n",
    "        'Addictive Disorder']\n",
    "\n",
    "new_vals=['Anxiety','Mood','Psychotic','Eating','Attention','Personality','Ocd','Ptsd',\\\n",
    "     'StressResponse','Dissociative','SubstanceUse','Addictive']\n",
    "\n",
    "for diagnosis in vals:\n",
    "    ix=vals.index(diagnosis)\n",
    "    new_col='possCurrMhd_'+new_vals[ix]\n",
    "    data_2019[new_col] = data_2019.apply(lambda x: 0,axis=1)\n",
    "    new_col1='diagMhd_'+new_vals[ix]\n",
    "    data_2019[new_col1] = data_2019.apply(lambda x: 0,axis=1)\n",
    "    \n",
    "for i,diagnoses in enumerate(data_2019['possCurrMhd']):\n",
    "    if type(diagnoses) == str:\n",
    "        for diagnosis in vals:\n",
    "            if diagnosis in diagnoses:\n",
    "                ix=vals.index(diagnosis)\n",
    "                new_col='possCurrMhd_'+new_vals[ix]\n",
    "                data_2019.iloc[i,data_2019.columns.get_loc(new_col)] = 1\n",
    "    \n",
    "for i,diagnoses in enumerate(data_2019['diagMhd']):\n",
    "    if type(diagnoses) == str:\n",
    "        for diagnosis in vals:\n",
    "            if diagnosis in diagnoses:\n",
    "                ix=vals.index(diagnosis)\n",
    "                new_col1='diagMhd_'+new_vals[ix]\n",
    "                data_2019.iloc[i,data_2019.columns.get_loc(new_col1)] = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merge Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Find Overlapping Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = []\n",
    "if (data_2017.columns & data_2018.columns & data_2019.columns).any(): \n",
    "    columns.append(data_2017.columns & data_2018.columns & data_2019.columns)\n",
    "else: \n",
    "    print(\"No common elements\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2019_unique = np.array(data_2019[data_2019.columns.difference(columns[0])].columns)\n",
    "data_2019_same = data_2019[data_2019.columns.difference(data_2019_unique)].columns\n",
    "data_2019_df = data_2019[data_2019_same]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2018_unique = data_2018[data_2018.columns.difference(columns[0])].columns\n",
    "data_2018_same = data_2018[data_2018.columns.difference(data_2018_unique)].columns\n",
    "data_2018_df = data_2018[data_2018_same]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2017_unique = data_2017[data_2017.columns.difference(columns[0])].columns\n",
    "data_2017_same = data_2017[data_2017.columns.difference(data_2017_unique)].columns\n",
    "data_2017_df = data_2017[data_2017_same]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Merge the Data into One Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merging all 3 datasets into 1 dataset\n",
    "concat_df = pd.concat([data_2017_df,data_2018_df,data_2019_df],axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# More Cleaning and Formatting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Drop Unwanted Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping previous employer questions\n",
    "import re\n",
    "pattern = re.compile(\".*previous.\")\n",
    "keep = ['<strong>Do you have previous employers?</strong>','<strong>Have you observed or experienced an unsupportive or badly handled response to a mental health issue in your current or previous workplace?</strong>','<strong>Have you observed or experienced supportive or well handled response to a mental health issue in your current or previous workplace?</strong>']\n",
    "for column in concat_df.columns:\n",
    "    if column not in keep:\n",
    "        if pattern.match(column):\n",
    "            concat_df.drop(column,inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping text questions\n",
    "pattern1 = re.compile(\".*describe.\")\n",
    "pattern2 = re.compile(\"Describe*.\")\n",
    "for column in concat_df.columns:\n",
    "    if pattern1.match(column) or pattern2.match(column):\n",
    "        concat_df.drop(column,inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping text questions\n",
    "pattern = re.compile(\"Why or why*.\")\n",
    "for column in concat_df.columns:\n",
    "    if pattern.match(column):\n",
    "        concat_df.drop(column,inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping leftover previous employer columns\n",
    "concat_df.drop(['If there is anything else you would like to tell us that has not been covered by the survey questions, please use this space to do so.',\n",
    "               'Was your employer primarily a tech company/organization?',\n",
    "               'Would you have been willing to discuss your mental health with your direct supervisor(s)?'],inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping leftover self-employed columns\n",
    "concat_df.drop(['<strong>If you have been diagnosed or treated for a mental health disorder, do you ever reveal this to clients or business contacts?</strong>',\n",
    "               '<strong>If you have been diagnosed or treated for a mental health disorder, do you ever reveal this to coworkers or employees?</strong>',\n",
    "               'Do you believe your productivity is ever affected by a mental health issue?',\n",
    "               'Do you know local or online resources to seek help for a mental health issue?',\n",
    "               'If you have revealed a mental health disorder to a client or business contact, how has this affected you or the relationship?',\n",
    "               'If you have revealed a mental health disorder to a coworker or employee, how has this impacted you or the relationship?',\n",
    "               'Do you have medical coverage (private insurance or state-provided) that includes treatment of mental health disorders?',\n",
    "               'If yes, what percentage of your work time (time performing primary or secondary job functions) is affected by a mental health issue?'\n",
    "               ],inplace=True,axis=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping race column\n",
    "concat_df.drop(['What is your race?'],inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Gender Mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "gender_dict = {}\n",
    "\n",
    "nonbinary = re.compile(\".*nonbinary.*\")\n",
    "binary = re.compile(\".*binary.*\")\n",
    "fluid = re.compile(\".*fluid.*\")\n",
    "genderqueer = re.compile(\".*genderqueer.*\")\n",
    "both = re.compile(\".*both.*\")\n",
    "nb = re.compile(\".*nb.*\")\n",
    "contextual = re.compile(\".*contextual.*\")\n",
    "ish = re.compile(\".*-ish.*\")\n",
    "ostensibly = re.compile(\".*ostensibly.*\")\n",
    "maybe = re.compile(\".*shrug.*\")\n",
    "demi = re.compile(\".*demi.*\")\n",
    "nonconforming = re.compile(\".*nonconforming.*\")\n",
    "simple = re.compile(\".*simple.*\")\n",
    "questioning = re.compile(\".*questioning.*\")\n",
    "\n",
    "trans = re.compile(\".*trans.*\")\n",
    "fem = re.compile(\".*fem.*\")\n",
    "woman = re.compile(\".*woman.*\")\n",
    "f = re.compile(\"f\")\n",
    "she = re.compile(\"she\")\n",
    "\n",
    "male = re.compile(\".*male.*\")\n",
    "man = re.compile(\".*man.*\")\n",
    "masc = re.compile(\".*masc.*\")\n",
    "m = re.compile(\"m\")\n",
    "swm = re.compile(\".*swm.*\")\n",
    "dude = re.compile(\".*dude.*\")\n",
    "penis = re.compile(\".*penis.*\")\n",
    "\n",
    "for gender in concat_df['What is your gender?'].unique():\n",
    "    if trans.match(str(gender).lower()):\n",
    "        if fem.match(str(gender).lower()) or woman.match(str(gender).lower()):\n",
    "            gender_dict[gender] = 'trans female'\n",
    "        elif male.match(str(gender).lower()) or man.match(str(gender).lower()):\n",
    "                gender_dict[gender] = 'trans male'\n",
    "        else:\n",
    "            gender_dict[gender] = 'genderqueer/non-binary'\n",
    "    elif nonbinary.match(str(gender).lower().replace('-','')) or binary.match(str(gender).lower()) or fluid.match(str(gender).lower()) or genderqueer.match(str(gender).lower()) or both.match(str(gender).lower()) or nb.match(str(gender).lower()) or contextual.match(str(gender).lower()) or ish.match(str(gender).lower()) or ostensibly.match(str(gender).lower()) or maybe.match(str(gender).lower()) or demi.match(str(gender).lower()) or nonconforming.match(str(gender).lower().replace('-','')) or simple.match(str(gender).lower()) or questioning.match(str(gender).lower()):\n",
    "        gender_dict[gender] = 'genderqueer/non-binary'\n",
    "    elif fem.match(str(gender).lower()) or woman.match(str(gender).lower()) or f.match(str(gender).lower()) or she.match(str(gender).lower()):\n",
    "        gender_dict[gender] = 'cis female'\n",
    "    elif male.match(str(gender).lower()) or man.match(str(gender).lower()) or masc.match(str(gender).lower()) or m.match(str(gender).lower()) or  swm.match(str(gender).lower()) or  dude.match(str(gender).lower()) or  penis.match(str(gender).lower()):\n",
    "        gender_dict[gender] = 'cis male'\n",
    "    else:\n",
    "        gender_dict[gender] = 'other'\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Responses that were less obvious to categorize:\n",
    "\n",
    "- masculino, Masculine - cis male<br>\n",
    "- femmina - cis female <br>\n",
    "- She/her/they/them - cis female <br>\n",
    "- Female-identified - cis female <br>\n",
    "- Woman-identified - cis female<br>\n",
    "- I identify as female - cis female<br>\n",
    "- Identify as male - cis male<br>\n",
    "- Questioning - genderqueer<br>\n",
    "- gender non-conforming woman - genderqueer/non-binary<br>\n",
    "- Let\\'s keep it simple and say \"male\" - genderqueer/non-binary<br>\n",
    "- Demiguy - genderqueer/non-binary<br>\n",
    "- Ostensibly Male - genderqueer/non-binary<br>\n",
    "- male-ish - genderqueer/non-binary<br>\n",
    "- Female-ish - genderqueer/non-binary<br>\n",
    "- '*shrug emoji* (F)' - genderqueer/non-binary<br>\n",
    "- transgender - genderqueer/non-binary<br>\n",
    "- None - other<br>\n",
    "- Agender - other<br>\n",
    "- agender - other<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i,gender in enumerate(concat_df['What is your gender?']):\n",
    "    concat_df.iloc[i,concat_df.columns.get_loc('What is your gender?')] = gender_dict[gender]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Address Missing Data - First Pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>&lt;strong&gt;Are you self-employed?&lt;/strong&gt;</th>\n",
       "      <th>&lt;strong&gt;Do you have previous employers?&lt;/strong&gt;</th>\n",
       "      <th>&lt;strong&gt;Have you observed or experienced an unsupportive or badly handled response to a mental health issue in your current or previous workplace?&lt;/strong&gt;</th>\n",
       "      <th>&lt;strong&gt;Have you observed or experienced supportive or well handled response to a mental health issue in your current or previous workplace?&lt;/strong&gt;</th>\n",
       "      <th>Are you openly identified at work as a person with a mental health issue?</th>\n",
       "      <th>Do you currently have a mental health disorder?</th>\n",
       "      <th>Do you have a family history of mental illness?</th>\n",
       "      <th>Do you know the options for mental health care available under your employer-provided health coverage?</th>\n",
       "      <th>Does your employer offer resources to learn more about mental health disorders and options for seeking help?</th>\n",
       "      <th>Does your employer provide mental health benefits as part of healthcare coverage?</th>\n",
       "      <th>...</th>\n",
       "      <th>possCurrMhd_Attention</th>\n",
       "      <th>possCurrMhd_Dissociative</th>\n",
       "      <th>possCurrMhd_Eating</th>\n",
       "      <th>possCurrMhd_Mood</th>\n",
       "      <th>possCurrMhd_Ocd</th>\n",
       "      <th>possCurrMhd_Personality</th>\n",
       "      <th>possCurrMhd_Psychotic</th>\n",
       "      <th>possCurrMhd_Ptsd</th>\n",
       "      <th>possCurrMhd_StressResponse</th>\n",
       "      <th>possCurrMhd_SubstanceUse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mood Disorder (Depression, Bipolar Disorder, etc)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>No</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>I've always been self-employed</td>\n",
       "      <td>I've always been self-employed</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>No</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1523 rows × 68 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     <strong>Are you self-employed?</strong>  \\\n",
       "0                                          0   \n",
       "1                                          0   \n",
       "2                                          0   \n",
       "3                                          0   \n",
       "4                                          1   \n",
       "..                                       ...   \n",
       "347                                        0   \n",
       "348                                        1   \n",
       "349                                        1   \n",
       "350                                        0   \n",
       "351                                        0   \n",
       "\n",
       "     <strong>Do you have previous employers?</strong>  \\\n",
       "0                                                   1   \n",
       "1                                                   1   \n",
       "2                                                   1   \n",
       "3                                                   0   \n",
       "4                                                   1   \n",
       "..                                                ...   \n",
       "347                                                 1   \n",
       "348                                                 1   \n",
       "349                                                 0   \n",
       "350                                                 1   \n",
       "351                                                 1   \n",
       "\n",
       "    <strong>Have you observed or experienced an unsupportive or badly handled response to a mental health issue in your current or previous workplace?</strong>  \\\n",
       "0                                   Yes, I experienced                                                                                                            \n",
       "1                                      Yes, I observed                                                                                                            \n",
       "2                                   Yes, I experienced                                                                                                            \n",
       "3                                       Maybe/Not sure                                                                                                            \n",
       "4                                                   No                                                                                                            \n",
       "..                                                 ...                                                                                                            \n",
       "347                                    Yes, I observed                                                                                                            \n",
       "348                                    Yes, I observed                                                                                                            \n",
       "349                     I've always been self-employed                                                                                                            \n",
       "350                                     Maybe/Not sure                                                                                                            \n",
       "351                                     Maybe/Not sure                                                                                                            \n",
       "\n",
       "    <strong>Have you observed or experienced supportive or well handled response to a mental health issue in your current or previous workplace?</strong>  \\\n",
       "0                                   Yes, I experienced                                                                                                      \n",
       "1                                       Maybe/Not sure                                                                                                      \n",
       "2                                   Yes, I experienced                                                                                                      \n",
       "3                                       Maybe/Not sure                                                                                                      \n",
       "4                                      Yes, I observed                                                                                                      \n",
       "..                                                 ...                                                                                                      \n",
       "347                                     Maybe/Not sure                                                                                                      \n",
       "348                                                 No                                                                                                      \n",
       "349                     I've always been self-employed                                                                                                      \n",
       "350                                 Yes, I experienced                                                                                                      \n",
       "351                                                 No                                                                                                      \n",
       "\n",
       "     Are you openly identified at work as a person with a mental health issue?  \\\n",
       "0                                                  0.0                           \n",
       "1                                                  0.0                           \n",
       "2                                                  1.0                           \n",
       "3                                                  0.0                           \n",
       "4                                                  0.0                           \n",
       "..                                                 ...                           \n",
       "347                                                0.0                           \n",
       "348                                                0.0                           \n",
       "349                                                0.0                           \n",
       "350                                                0.0                           \n",
       "351                                                1.0                           \n",
       "\n",
       "    Do you currently have a mental health disorder?  \\\n",
       "0                                          Possibly   \n",
       "1                                          Possibly   \n",
       "2                                               Yes   \n",
       "3                                               Yes   \n",
       "4                                                No   \n",
       "..                                              ...   \n",
       "347                                        Possibly   \n",
       "348                                              No   \n",
       "349                                              No   \n",
       "350                                        Possibly   \n",
       "351                                             Yes   \n",
       "\n",
       "    Do you have a family history of mental illness?  \\\n",
       "0                                                No   \n",
       "1                                                No   \n",
       "2                                               Yes   \n",
       "3                                      I don't know   \n",
       "4                                               Yes   \n",
       "..                                              ...   \n",
       "347                                              No   \n",
       "348                                              No   \n",
       "349                                              No   \n",
       "350                                              No   \n",
       "351                                             Yes   \n",
       "\n",
       "    Do you know the options for mental health care available under your employer-provided health coverage?  \\\n",
       "0                                                  Yes                                                       \n",
       "1                                                  Yes                                                       \n",
       "2                                                   No                                                       \n",
       "3                                                  Yes                                                       \n",
       "4                                                  NaN                                                       \n",
       "..                                                 ...                                                       \n",
       "347                                                 No                                                       \n",
       "348                                                NaN                                                       \n",
       "349                                                NaN                                                       \n",
       "350                                                 No                                                       \n",
       "351                                                Yes                                                       \n",
       "\n",
       "    Does your employer offer resources to learn more about mental health disorders and options for seeking help?  \\\n",
       "0                                         I don't know                                                             \n",
       "1                                                   No                                                             \n",
       "2                                                   No                                                             \n",
       "3                                         I don't know                                                             \n",
       "4                                                  NaN                                                             \n",
       "..                                                 ...                                                             \n",
       "347                                       I don't know                                                             \n",
       "348                                                NaN                                                             \n",
       "349                                                NaN                                                             \n",
       "350                                                 No                                                             \n",
       "351                                                Yes                                                             \n",
       "\n",
       "    Does your employer provide mental health benefits as part of healthcare coverage?  \\\n",
       "0                                                   No                                  \n",
       "1                                                  Yes                                  \n",
       "2                                         I don't know                                  \n",
       "3                                                  Yes                                  \n",
       "4                                                  NaN                                  \n",
       "..                                                 ...                                  \n",
       "347                                       I don't know                                  \n",
       "348                                                NaN                                  \n",
       "349                                                NaN                                  \n",
       "350                                                 No                                  \n",
       "351                                                Yes                                  \n",
       "\n",
       "     ...  possCurrMhd_Attention possCurrMhd_Dissociative possCurrMhd_Eating  \\\n",
       "0    ...                    NaN                      NaN                NaN   \n",
       "1    ...                    NaN                      NaN                NaN   \n",
       "2    ...                    NaN                      NaN                NaN   \n",
       "3    ...                    NaN                      NaN                NaN   \n",
       "4    ...                    NaN                      NaN                NaN   \n",
       "..   ...                    ...                      ...                ...   \n",
       "347  ...                      0                        0                  0   \n",
       "348  ...                      0                        0                  0   \n",
       "349  ...                      0                        0                  0   \n",
       "350  ...                      0                        0                  0   \n",
       "351  ...                      0                        0                  0   \n",
       "\n",
       "                                      possCurrMhd_Mood  possCurrMhd_Ocd  \\\n",
       "0                                                  NaN              NaN   \n",
       "1    Mood Disorder (Depression, Bipolar Disorder, etc)              NaN   \n",
       "2                                                  NaN              NaN   \n",
       "3                                                  NaN              NaN   \n",
       "4                                                  NaN              NaN   \n",
       "..                                                 ...              ...   \n",
       "347                                                  1                0   \n",
       "348                                                  0                0   \n",
       "349                                                  0                0   \n",
       "350                                                  1                0   \n",
       "351                                                  0                0   \n",
       "\n",
       "     possCurrMhd_Personality  possCurrMhd_Psychotic possCurrMhd_Ptsd  \\\n",
       "0                        NaN                    NaN              NaN   \n",
       "1                        NaN                    NaN              NaN   \n",
       "2                        NaN                    NaN              NaN   \n",
       "3                        NaN                    NaN              NaN   \n",
       "4                        NaN                    NaN              NaN   \n",
       "..                       ...                    ...              ...   \n",
       "347                        0                    0.0                0   \n",
       "348                        0                    0.0                0   \n",
       "349                        0                    0.0                0   \n",
       "350                        0                    0.0                0   \n",
       "351                        0                    0.0                0   \n",
       "\n",
       "    possCurrMhd_StressResponse  possCurrMhd_SubstanceUse  \n",
       "0                          NaN                       NaN  \n",
       "1                          NaN                       NaN  \n",
       "2                          NaN                       NaN  \n",
       "3                          NaN                       NaN  \n",
       "4                          NaN                       NaN  \n",
       "..                         ...                       ...  \n",
       "347                          0                         0  \n",
       "348                          0                         0  \n",
       "349                          0                         0  \n",
       "350                          0                         0  \n",
       "351                          0                         0  \n",
       "\n",
       "[1523 rows x 68 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "concat_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make  nan values 'not applicable' in 'Has being identified as a person with a mental health issue affected your career?'\n",
    "# if they answered 'No' to 'Are you openly identified at work as a person with a mental health issue?'\n",
    "# else make nan values 0 because they are identified but not affected \n",
    "for i,entry in enumerate(concat_df['Has being identified as a person with a mental health issue affected your career?']):\n",
    "    if math.isnan(entry) == True:\n",
    "        if concat_df.iloc[i,concat_df.columns.get_loc('Are you openly identified at work as a person with a mental health issue?')] == 0:\n",
    "            concat_df.iloc[i,concat_df.columns.get_loc('Has being identified as a person with a mental health issue affected your career?')] = 'not applicable'\n",
    "        else:\n",
    "            concat_df.iloc[i,concat_df.columns.get_loc('Has being identified as a person with a mental health issue affected your career?')] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make all nan values 'not applicable' if answered 0 ('No') to 'Are you openly identified at work as a person with a mental health issue?'\n",
    "# else make nan values 0 because they are identified but not affected \n",
    "for i,entry in enumerate(concat_df['How has it affected your career?']):\n",
    "    if math.isnan(entry) == True:\n",
    "        if concat_df.iloc[i,concat_df.columns.get_loc('Are you openly identified at work as a person with a mental health issue?')] == 0:\n",
    "            concat_df.iloc[i,concat_df.columns.get_loc('How has it affected your career?')] = 'not applicable'\n",
    "        else:\n",
    "            concat_df.iloc[i,concat_df.columns.get_loc('How has it affected your career?')] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make all nan values 'not applicable' because all do not live in the U.S.\n",
    "nan = re.compile(\"nan\")\n",
    "\n",
    "for i,entry in enumerate(concat_df['What US state or territory do you <strong>live</strong> in?']):\n",
    "    if nan.match(str(entry).lower()):\n",
    "        concat_df.iloc[i,concat_df.columns.get_loc('What US state or territory do you <strong>live</strong> in?')] = 'not applicable'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make all nan values 'not applicable' because all do not live in the U.S.\n",
    "for i,entry in enumerate(concat_df['What US state or territory do you <strong>work</strong> in?']):\n",
    "    if nan.match(str(entry).lower()):\n",
    "        concat_df.iloc[i,concat_df.columns.get_loc('What US state or territory do you <strong>work</strong> in?')] = 'not applicable'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make all nan values to 'No' for 'Have you ever been diagnosed with a mental health disorder?'\n",
    "# because it is a follow up to only individuals who answered 'Yes' to Do you currently have a mental health disorder?'\n",
    "for i,entry in enumerate(concat_df['Have you ever been diagnosed with a mental health disorder?']):\n",
    "    if nan.match(str(entry).lower()):\n",
    "        concat_df.iloc[i,concat_df.columns.get_loc('Have you ever been diagnosed with a mental health disorder?')] = 'No'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Changing all nan values to 'not applicable' in 'Have your observations of how another individual who discussed a mental health issue made you less likely to reveal a mental health issue yourself in your current workplace?'\n",
    "# because assuming that these individuals did not have such observations\n",
    "for i,entry in enumerate(concat_df['Have your observations of how another individual who discussed a mental health issue made you less likely to reveal a mental health issue yourself in your current workplace?']):\n",
    "    if nan.match(str(entry).lower()):\n",
    "        concat_df.iloc[i,concat_df.columns.get_loc('Have your observations of how another individual who discussed a mental health issue made you less likely to reveal a mental health issue yourself in your current workplace?')] = 'not applicable'      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Changing all nan values in 'Do you know the options for mental health care available under your employer-provided health coverage?'\n",
    "# to 'not applicable' if answered 'No' to 'Does your employer offer resources to learn more about mental health disorders and options for seeking help?'\n",
    "# else changing to 'No' if answered 'Yes' to 'Does your employer offer resources to learn more about mental health disorders and options for seeking help?'\n",
    "for i,entry in enumerate(concat_df['Do you know the options for mental health care available under your employer-provided health coverage?']):\n",
    "    if nan.match(str(entry).lower()):\n",
    "        if concat_df.iloc[i,concat_df.columns.get_loc('Does your employer offer resources to learn more about mental health disorders and options for seeking help?')] == 'Yes':\n",
    "            concat_df.iloc[i,concat_df.columns.get_loc('Do you know the options for mental health care available under your employer-provided health coverage?')] = 'No'\n",
    "        else:\n",
    "            concat_df.iloc[i,concat_df.columns.get_loc('Do you know the options for mental health care available under your employer-provided health coverage?')] = 'not applicable'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Drop all rows of self-employed individuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop all rows of self-employed individuals\n",
    "self_emp_ind = concat_df.index[concat_df['<strong>Are you self-employed?</strong>']==1].tolist()\n",
    "concat_df.drop(self_emp_ind,inplace=True,axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Check which columns are still missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1.0\n",
       "1      1.0\n",
       "2      1.0\n",
       "3      1.0\n",
       "5      0.0\n",
       "      ... \n",
       "344    0.0\n",
       "345    1.0\n",
       "346    0.0\n",
       "347    0.0\n",
       "351    1.0\n",
       "Name: Have you ever discussed your mental health with coworkers?, Length: 1037, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check which columns are still missing values\n",
    "concat_df.columns[concat_df.isnull().any()]\n",
    "concat_df['Have you ever discussed your mental health with coworkers?']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rename Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['<strong>Are you self-employed?</strong>',\n",
      "       '<strong>Do you have previous employers?</strong>',\n",
      "       '<strong>Have you observed or experienced an unsupportive or badly handled response to a mental health issue in your current or previous workplace?</strong>',\n",
      "       '<strong>Have you observed or experienced supportive or well handled response to a mental health issue in your current or previous workplace?</strong>',\n",
      "       'Are you openly identified at work as a person with a mental health issue?',\n",
      "       'Do you currently have a mental health disorder?',\n",
      "       'Do you have a family history of mental illness?',\n",
      "       'Do you know the options for mental health care available under your employer-provided health coverage?',\n",
      "       'Does your employer offer resources to learn more about mental health disorders and options for seeking help?',\n",
      "       'Does your employer provide mental health benefits as part of healthcare coverage?',\n",
      "       'Has being identified as a person with a mental health issue affected your career?',\n",
      "       'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?',\n",
      "       'Have you ever been diagnosed with a mental health disorder?',\n",
      "       'Have you ever discussed your mental health with coworkers?',\n",
      "       'Have you ever discussed your mental health with your employer?',\n",
      "       'Have you ever had a coworker discuss their or another coworker's mental health with you?',\n",
      "       'Have you ever sought treatment for a mental health disorder from a mental health professional?',\n",
      "       'Have you had a mental health disorder in the past?',\n",
      "       'Have your observations of how another individual who discussed a mental health issue made you less likely to reveal a mental health issue yourself in your current workplace?',\n",
      "       'How has it affected your career?',\n",
      "       'How many employees does your company or organization have?',\n",
      "       'How willing would you be to share with friends and family that you have a mental illness?',\n",
      "       'If a mental health issue prompted you to request a medical leave from work, how easy or difficult would it be to ask for that leave?',\n",
      "       'If they knew you suffered from a mental health disorder, how do you think that team members/co-workers would react?',\n",
      "       'If you have a mental health disorder, how often do you feel that it interferes with your work <strong>when being treated effectively?</strong>',\n",
      "       'If you have a mental health disorder, how often do you feel that it interferes with your work <strong>when</strong> <em><strong>NOT</strong></em><strong> being treated effectively (i.e., when you are experiencing symptoms)?</strong>',\n",
      "       'Is your anonymity protected if you choose to take advantage of mental health or substance abuse treatment resources provided by your employer?',\n",
      "       'Is your employer primarily a tech company/organization?',\n",
      "       'Is your primary role within your company related to tech/IT?',\n",
      "       'Overall, how much importance does your employer place on mental health?',\n",
      "       'Overall, how much importance does your employer place on physical health?',\n",
      "       'Overall, how well do you think the tech industry supports employees with mental health issues?',\n",
      "       'What US state or territory do you <strong>live</strong> in?',\n",
      "       'What US state or territory do you <strong>work</strong> in?',\n",
      "       'What country do you <strong>live</strong> in?',\n",
      "       'What country do you <strong>work</strong> in?', 'What is your age?',\n",
      "       'What is your gender?',\n",
      "       'Would you be willing to bring up a physical health issue with a potential employer in an interview?',\n",
      "       'Would you bring up your mental health with a potential employer in an interview?',\n",
      "       'Would you feel comfortable discussing a mental health issue with your coworkers?',\n",
      "       'Would you feel comfortable discussing a mental health issue with your direct supervisor(s)?',\n",
      "       'Would you feel more comfortable talking to your coworkers about your physical health or your mental health?',\n",
      "       'Year', 'diagMhd_Addictive', 'diagMhd_Anxiety', 'diagMhd_Attention',\n",
      "       'diagMhd_Dissociative', 'diagMhd_Eating', 'diagMhd_Mood', 'diagMhd_Ocd',\n",
      "       'diagMhd_Personality', 'diagMhd_Psychotic', 'diagMhd_Ptsd',\n",
      "       'diagMhd_StressResponse', 'diagMhd_SubstanceUse',\n",
      "       'possCurrMhd_Addictive', 'possCurrMhd_Anxiety', 'possCurrMhd_Attention',\n",
      "       'possCurrMhd_Dissociative', 'possCurrMhd_Eating', 'possCurrMhd_Mood',\n",
      "       'possCurrMhd_Ocd', 'possCurrMhd_Personality', 'possCurrMhd_Psychotic',\n",
      "       'possCurrMhd_Ptsd', 'possCurrMhd_StressResponse',\n",
      "       'possCurrMhd_SubstanceUse'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(concat_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44\n"
     ]
    }
   ],
   "source": [
    "new_col_names = [\"selfEmployed\", \"prevEmployers\", \"obsPrevBadResp\", \"obsPrevGoodResp\", \"mhOpenAtWork\", \"currMhd\", \"famHistMhd\",\n",
    "            \"empMhCvgKnowledge\", \"empMhResourcesAvail\", \"empMhCvgBenefits\", \"mhOpenAtWorkImpact\", \"empMhDiscuss\",\n",
    "           \"diagMhd\", \"discussedWithCoworkers\", \"discussedWithEmployer\", \"discussedOtherCoworker\", \"soughtTreatment\",\n",
    "           \"pastMhd\", \"mhOtherObsImpact\", \"mhCareerImpactLvl\", \"numEmp\", \"willingToShareFamFriendsLvl\", \"mhLeaveDifficultyLvl\",\n",
    "            \"perceivedTeamReactionLvl\", \"mhWorkInterfereLvl_EffTreat\", \"mhWorkInterfereLvl_IneffTreat\",  \"empAnonProtection\", \"techCompany\",\n",
    "            \"techRole\", \"perceivedEmpMhImpLvl\", \"perceivedEmpPhImpLvl\", \"perceivedTechIndustrySupportLvl\", \"liveState\", \"workState\",\n",
    "           \"liveCountry\", \"workCountry\", \"age\", \"gender\", \"willingDiscussPhInterview\", \"willingDiscussMhInterview\", \"comfortDiscussMhCoworker\",\n",
    "           \"comfortDiscussMhSupervisor\", \"comfortDiscussPhSupervisor\", \"year\"]\n",
    "print(len(set(new_col_names)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68\n"
     ]
    }
   ],
   "source": [
    "new_col_names = new_col_names + concat_df.columns[44:].tolist()\n",
    "print(len(new_col_names))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>selfEmployed</th>\n",
       "      <th>prevEmployers</th>\n",
       "      <th>obsPrevBadResp</th>\n",
       "      <th>obsPrevGoodResp</th>\n",
       "      <th>mhOpenAtWork</th>\n",
       "      <th>currMhd</th>\n",
       "      <th>famHistMhd</th>\n",
       "      <th>empMhCvgKnowledge</th>\n",
       "      <th>empMhResourcesAvail</th>\n",
       "      <th>empMhCvgBenefits</th>\n",
       "      <th>...</th>\n",
       "      <th>possCurrMhd_Attention</th>\n",
       "      <th>possCurrMhd_Dissociative</th>\n",
       "      <th>possCurrMhd_Eating</th>\n",
       "      <th>possCurrMhd_Mood</th>\n",
       "      <th>possCurrMhd_Ocd</th>\n",
       "      <th>possCurrMhd_Personality</th>\n",
       "      <th>possCurrMhd_Psychotic</th>\n",
       "      <th>possCurrMhd_Ptsd</th>\n",
       "      <th>possCurrMhd_StressResponse</th>\n",
       "      <th>possCurrMhd_SubstanceUse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mood Disorder (Depression, Bipolar Disorder, etc)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>Yes, I experienced</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>Maybe/Not sure</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>Yes, I observed</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 68 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   selfEmployed  prevEmployers      obsPrevBadResp     obsPrevGoodResp  \\\n",
       "0             0              1  Yes, I experienced  Yes, I experienced   \n",
       "1             0              1     Yes, I observed      Maybe/Not sure   \n",
       "2             0              1  Yes, I experienced  Yes, I experienced   \n",
       "3             0              0      Maybe/Not sure      Maybe/Not sure   \n",
       "5             0              1     Yes, I observed     Yes, I observed   \n",
       "\n",
       "   mhOpenAtWork   currMhd    famHistMhd empMhCvgKnowledge empMhResourcesAvail  \\\n",
       "0           0.0  Possibly            No               Yes        I don't know   \n",
       "1           0.0  Possibly            No               Yes                  No   \n",
       "2           1.0       Yes           Yes                No                  No   \n",
       "3           0.0       Yes  I don't know               Yes        I don't know   \n",
       "5           0.0        No           Yes                No        I don't know   \n",
       "\n",
       "  empMhCvgBenefits  ... possCurrMhd_Attention possCurrMhd_Dissociative  \\\n",
       "0               No  ...                   NaN                      NaN   \n",
       "1              Yes  ...                   NaN                      NaN   \n",
       "2     I don't know  ...                   NaN                      NaN   \n",
       "3              Yes  ...                   NaN                      NaN   \n",
       "5              Yes  ...                   NaN                      NaN   \n",
       "\n",
       "  possCurrMhd_Eating                                   possCurrMhd_Mood  \\\n",
       "0                NaN                                                NaN   \n",
       "1                NaN  Mood Disorder (Depression, Bipolar Disorder, etc)   \n",
       "2                NaN                                                NaN   \n",
       "3                NaN                                                NaN   \n",
       "5                NaN                                                NaN   \n",
       "\n",
       "   possCurrMhd_Ocd  possCurrMhd_Personality  possCurrMhd_Psychotic  \\\n",
       "0              NaN                      NaN                    NaN   \n",
       "1              NaN                      NaN                    NaN   \n",
       "2              NaN                      NaN                    NaN   \n",
       "3              NaN                      NaN                    NaN   \n",
       "5              NaN                      NaN                    NaN   \n",
       "\n",
       "  possCurrMhd_Ptsd possCurrMhd_StressResponse possCurrMhd_SubstanceUse  \n",
       "0              NaN                        NaN                      NaN  \n",
       "1              NaN                        NaN                      NaN  \n",
       "2              NaN                        NaN                      NaN  \n",
       "3              NaN                        NaN                      NaN  \n",
       "5              NaN                        NaN                      NaN  \n",
       "\n",
       "[5 rows x 68 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "concat_df.columns = new_col_names\n",
    "concat_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Additional Cleaning and Formatting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Drop two columns with uniform entries: selfEmployed, possCurrMhd_Psychotic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1037, 66)\n"
     ]
    }
   ],
   "source": [
    "# dropping columns: selfEmployed, possCurrMhd_Psychotic\n",
    "concat_df = concat_df.drop('selfEmployed', axis=1)\n",
    "concat_df = concat_df.drop('possCurrMhd_Psychotic', axis=1)\n",
    "print(concat_df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Split data into X and y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = \"comfortDiscussMhSupervisor\"\n",
    "X = concat_df.drop(target, axis=1)\n",
    "y = concat_df.loc[:,target]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Scale age column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0.187500\n",
       "1      0.270833\n",
       "2      0.375000\n",
       "3      0.083333\n",
       "5      0.250000\n",
       "         ...   \n",
       "344    0.500000\n",
       "345    0.166667\n",
       "346    0.270833\n",
       "347    0.187500\n",
       "351    0.125000\n",
       "Name: age, Length: 1037, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# scaling the age column\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "X[\"age\"] = MinMaxScaler().fit_transform(X[[\"age\"]])\n",
    "\n",
    "X[\"age\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Encode categorical data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Target Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2 0 2 ... 0 1 0]\n"
     ]
    }
   ],
   "source": [
    "# encoding y (target) variable\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "y = le.fit_transform(y)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nominal Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>discussedWithCoworkers</th>\n",
       "      <th>discussedOtherCoworker</th>\n",
       "      <th>pastMhd</th>\n",
       "      <th>mhCareerImpactLvl</th>\n",
       "      <th>numEmp</th>\n",
       "      <th>willingToShareFamFriendsLvl</th>\n",
       "      <th>mhLeaveDifficultyLvl</th>\n",
       "      <th>perceivedTeamReactionLvl</th>\n",
       "      <th>mhWorkInterfereLvl_EffTreat</th>\n",
       "      <th>mhWorkInterfereLvl_IneffTreat</th>\n",
       "      <th>...</th>\n",
       "      <th>gender_trans female</th>\n",
       "      <th>gender_trans male</th>\n",
       "      <th>willingDiscussPhInterview_No</th>\n",
       "      <th>willingDiscussPhInterview_Yes</th>\n",
       "      <th>willingDiscussMhInterview_No</th>\n",
       "      <th>willingDiscussMhInterview_Yes</th>\n",
       "      <th>comfortDiscussMhCoworker_No</th>\n",
       "      <th>comfortDiscussMhCoworker_Yes</th>\n",
       "      <th>comfortDiscussPhSupervisor_Physical health</th>\n",
       "      <th>comfortDiscussPhSupervisor_Same level of comfort for each</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>not applicable</td>\n",
       "      <td>100-500</td>\n",
       "      <td>5</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Possibly</td>\n",
       "      <td>not applicable</td>\n",
       "      <td>100-500</td>\n",
       "      <td>4</td>\n",
       "      <td>I don't know</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Not applicable to me</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3</td>\n",
       "      <td>25-Jun</td>\n",
       "      <td>5</td>\n",
       "      <td>Difficult</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>not applicable</td>\n",
       "      <td>More than 1000</td>\n",
       "      <td>10</td>\n",
       "      <td>Difficult</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Sometimes</td>\n",
       "      <td>Often</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>not applicable</td>\n",
       "      <td>100-500</td>\n",
       "      <td>5</td>\n",
       "      <td>Somewhat easy</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Rarely</td>\n",
       "      <td>Not applicable to me</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 269 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   discussedWithCoworkers  discussedOtherCoworker   pastMhd mhCareerImpactLvl  \\\n",
       "0                     1.0                     1.0  Possibly    not applicable   \n",
       "1                     1.0                     1.0  Possibly    not applicable   \n",
       "2                     1.0                     0.0       Yes                 3   \n",
       "3                     1.0                     0.0        No    not applicable   \n",
       "5                     0.0                     0.0        No    not applicable   \n",
       "\n",
       "           numEmp  willingToShareFamFriendsLvl mhLeaveDifficultyLvl  \\\n",
       "0         100-500                            5         I don't know   \n",
       "1         100-500                            4         I don't know   \n",
       "2          25-Jun                            5            Difficult   \n",
       "3  More than 1000                           10            Difficult   \n",
       "5         100-500                            5        Somewhat easy   \n",
       "\n",
       "   perceivedTeamReactionLvl mhWorkInterfereLvl_EffTreat  \\\n",
       "0                      10.0                   Sometimes   \n",
       "1                       6.0        Not applicable to me   \n",
       "2                       5.0                   Sometimes   \n",
       "3                       5.0                   Sometimes   \n",
       "5                       4.0                      Rarely   \n",
       "\n",
       "  mhWorkInterfereLvl_IneffTreat  ...  gender_trans female  gender_trans male  \\\n",
       "0                     Sometimes  ...                    0                  0   \n",
       "1                     Sometimes  ...                    0                  0   \n",
       "2                     Sometimes  ...                    0                  0   \n",
       "3                         Often  ...                    0                  0   \n",
       "5          Not applicable to me  ...                    0                  0   \n",
       "\n",
       "   willingDiscussPhInterview_No  willingDiscussPhInterview_Yes  \\\n",
       "0                             0                              1   \n",
       "1                             0                              1   \n",
       "2                             0                              0   \n",
       "3                             1                              0   \n",
       "5                             0                              0   \n",
       "\n",
       "  willingDiscussMhInterview_No willingDiscussMhInterview_Yes  \\\n",
       "0                            1                             0   \n",
       "1                            1                             0   \n",
       "2                            1                             0   \n",
       "3                            1                             0   \n",
       "5                            1                             0   \n",
       "\n",
       "  comfortDiscussMhCoworker_No comfortDiscussMhCoworker_Yes  \\\n",
       "0                           0                            1   \n",
       "1                           0                            1   \n",
       "2                           0                            0   \n",
       "3                           0                            1   \n",
       "5                           0                            0   \n",
       "\n",
       "  comfortDiscussPhSupervisor_Physical health  \\\n",
       "0                                          0   \n",
       "1                                          0   \n",
       "2                                          0   \n",
       "3                                          0   \n",
       "5                                          1   \n",
       "\n",
       "  comfortDiscussPhSupervisor_Same level of comfort for each  \n",
       "0                                                  1         \n",
       "1                                                  1         \n",
       "2                                                  1         \n",
       "3                                                  1         \n",
       "5                                                  0         \n",
       "\n",
       "[5 rows x 269 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# nominal variables\n",
    "\n",
    "nominal_var_col_names = [\"prevEmployers\", \"obsPrevBadResp\", \"obsPrevGoodResp\", \"mhOpenAtWork\", \"currMhd\", \n",
    "                         \"famHistMhd\", \"empMhCvgKnowledge\", \"empMhResourcesAvail\", \"empMhCvgBenefits\",\n",
    "                         \"mhOpenAtWorkImpact\", \"empMhDiscuss\", \"diagMhd\", \"discussedWithEmployer\", \"soughtTreatment\", \n",
    "                         \"mhOtherObsImpact\", \"empAnonProtection\", \"techCompany\", \"techRole\", \"liveState\", \n",
    "                         \"workState\", \"liveCountry\", \"workCountry\", \"gender\",\"willingDiscussPhInterview\", \n",
    "                         \"willingDiscussMhInterview\", \"comfortDiscussMhCoworker\", \"comfortDiscussPhSupervisor\"]\n",
    "    \n",
    "X = pd.get_dummies(X, columns=nominal_var_col_names, drop_first=True)\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: The columns \"discussedWithCoworkers\", \"discussedOtherCoworker\", \"pastMhd\", are also nominal. \n",
    "However, since they are still missing data, we will address the missing data first, then encode these columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ordinal Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ordinal variables\n",
    "ordinal_var_col_names = [\"numEmp\", \"year\", \"mhLeaveDifficultyLvl\", \"mhWorkInterfereLvl_EffTreat\",\n",
    "                         \"mhWorkInterfereLvl_IneffTreat\", \"perceivedEmpPhImpLvl\", \"perceivedEmpMhImpLvl\",\n",
    "                         \"willingToShareFamFriendsLvl\", \"mhCareerImpactLvl\", \"perceivedTechIndustrySupportLvl\",\n",
    "                         \"perceivedTeamReactionLvl\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100-500           297\n",
      "More than 1000    289\n",
      "26-100            191\n",
      "25-Jun            158\n",
      "500-1000           74\n",
      "5-Jan              28\n",
      "Name: numEmp, dtype: int64\n",
      "100-500           297\n",
      "More than 1000    289\n",
      "26-100            191\n",
      "6-25              158\n",
      "500-1000           74\n",
      "1-5                28\n",
      "Name: numEmp, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(X['numEmp'].value_counts()) \n",
    "# There are some weird values in numEmp: '25-Jun' and '5-Jan' seem to be Excel formatting issues. \n",
    "# Looks like these should be 6-25 and 1-5\n",
    "X['numEmp']=X['numEmp'].map({'25-Jun':'6-25','5-Jan':'1-5'}).fillna(X['numEmp'])\n",
    "\n",
    "#confirm updated values\n",
    "print(X['numEmp'].value_counts()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "numEmp_map = {\"1-5\": 1, \"6-25\": 2, \"26-100\": 3, \"100-500\": 4, \"500-1000\": 5, \"More than 1000\": 6}\n",
    "year_map = {\"2017\": 1, \"2018\": 2, \"2019\": 3}\n",
    "mhLeaveDifficultyLvl_map = {\"Very easy\": 1, \"Somewhat easy\": 2, \"I don't know\": 3, \"Neither easy nor difficult\":3, \n",
    "                           \"Somewhat difficult\": 4, \"Difficult\": 5}\n",
    "mhWorkInterfereLvl_EffTreat_map = {\"Not applicable to me\": 0, \"Never\": 1, \"Rarely\": 2, \"Sometimes\": 3, \"Often\": 4}\n",
    "mhWorkInterfereLvl_IneffTreat_map = {\"Not applicable to me\": 0, \"Never\": 1, \"Rarely\": 2, \"Sometimes\": 3, \"Often\": 4}\n",
    "perceivedEmpPhImpLvl_map = {0.0: 1, 1.0: 2, 2.0: 3, 3.0: 4, 4.0: 5, 5.0: 6, 6.0: 7, 7.0: 8, 8.0: 9, 9.0: 10, 10.0: 11}\n",
    "perceivedEmpMhImpLvl_map = {0.0: 1, 1.0: 2, 2.0: 3, 3.0: 4, 4.0: 5, 5.0: 6, 6.0: 7, 7.0: 8, 8.0: 9, 9.0: 10, 10.0: 11}\n",
    "willingToShareFamFriendsLvl_map = {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11}\n",
    "mhCareerImpactLvl_map = {\"not applicable\": 0, 0: 1, 1.0: 2, 2.0: 3, 3.0: 4, 4.0: 5, 5.0: 6, 6.0: 7, 7.0: 8, 8.0: 9}\n",
    "perceivedTechIndustrySupportLvl_map = {1.0: 1, 2.0: 2, 3.0: 3, 4.0: 4, 5.0: 5}\n",
    "perceivedTeamReactionLvl_map = {0.0: 1, 1.0: 2, 2.0: 3, 3.0: 4, 4.0: 5, 5.0: 6, 6.0: 7, 7.0: 8, 8.0: 9, 9.0: 10, 10.0: 11}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "maps = {\"numEmp\": numEmp_map, \"year\": year_map, \"mhLeaveDifficultyLvl\": mhLeaveDifficultyLvl_map,\n",
    "        \"mhWorkInterfereLvl_EffTreat\": mhWorkInterfereLvl_EffTreat_map, \"mhWorkInterfereLvl_IneffTreat\":mhWorkInterfereLvl_IneffTreat_map,\n",
    "        \"perceivedEmpPhImpLvl\": perceivedEmpPhImpLvl_map, \"perceivedEmpMhImpLvl\": perceivedEmpMhImpLvl_map,\n",
    "        \"willingToShareFamFriendsLvl\": willingToShareFamFriendsLvl_map, \"mhCareerImpactLvl\": mhCareerImpactLvl_map,\n",
    "        \"perceivedTechIndustrySupportLvl\": perceivedTechIndustrySupportLvl_map, \"perceivedTeamReactionLvl\": perceivedTeamReactionLvl_map}\n",
    "for col in ordinal_var_col_names:\n",
    "    X[col] = X[col].map(maps[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4    297\n",
      "6    289\n",
      "3    191\n",
      "2    158\n",
      "5     74\n",
      "1     28\n",
      "Name: numEmp, dtype: int64\n",
      "1    556\n",
      "2    264\n",
      "3    217\n",
      "Name: year, dtype: int64\n",
      "3    316\n",
      "2    277\n",
      "1    227\n",
      "4    130\n",
      "5     87\n",
      "Name: mhLeaveDifficultyLvl, dtype: int64\n",
      "0    378\n",
      "3    297\n",
      "2    272\n",
      "4     57\n",
      "1     33\n",
      "Name: mhWorkInterfereLvl_EffTreat, dtype: int64\n",
      "4    429\n",
      "0    337\n",
      "3    224\n",
      "2     40\n",
      "1      7\n",
      "Name: mhWorkInterfereLvl_IneffTreat, dtype: int64\n",
      "8     218\n",
      "6     206\n",
      "9     175\n",
      "7     126\n",
      "11     70\n",
      "10     68\n",
      "4      55\n",
      "5      38\n",
      "3      36\n",
      "1      31\n",
      "2      14\n",
      "Name: perceivedEmpPhImpLvl, dtype: int64\n",
      "6     249\n",
      "8     140\n",
      "9     108\n",
      "7     107\n",
      "4     106\n",
      "5      84\n",
      "3      74\n",
      "1      71\n",
      "2      37\n",
      "10     34\n",
      "11     27\n",
      "Name: perceivedEmpMhImpLvl, dtype: int64\n",
      "8     165\n",
      "11    160\n",
      "9     151\n",
      "6     135\n",
      "7     101\n",
      "10     99\n",
      "4      59\n",
      "3      55\n",
      "5      48\n",
      "1      36\n",
      "2      28\n",
      "Name: willingToShareFamFriendsLvl, dtype: int64\n",
      "0    918\n",
      "1     86\n",
      "5      8\n",
      "4      8\n",
      "7      5\n",
      "3      4\n",
      "2      4\n",
      "9      2\n",
      "8      2\n",
      "Name: mhCareerImpactLvl, dtype: int64\n",
      "3    405\n",
      "2    342\n",
      "4    144\n",
      "1    135\n",
      "5     11\n",
      "Name: perceivedTechIndustrySupportLvl, dtype: int64\n",
      "6     271\n",
      "7     137\n",
      "8     135\n",
      "5     121\n",
      "9     102\n",
      "4      92\n",
      "11     47\n",
      "3      45\n",
      "10     35\n",
      "1      32\n",
      "2      20\n",
      "Name: perceivedTeamReactionLvl, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# checking the correct encoding\n",
    "for col in ordinal_var_col_names:\n",
    "    print(X[col].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Disorder Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    1031\n",
      "1       6\n",
      "Name: possCurrMhd_Addictive, dtype: int64\n",
      "0    899\n",
      "1    138\n",
      "Name: possCurrMhd_Anxiety, dtype: int64\n",
      "0    1004\n",
      "1      33\n",
      "Name: possCurrMhd_Attention, dtype: int64\n",
      "0    1031\n",
      "1       6\n",
      "Name: possCurrMhd_Dissociative, dtype: int64\n",
      "0    1032\n",
      "1       5\n",
      "Name: possCurrMhd_Eating, dtype: int64\n",
      "0    908\n",
      "1    129\n",
      "Name: possCurrMhd_Mood, dtype: int64\n",
      "0    1016\n",
      "1      21\n",
      "Name: possCurrMhd_Ocd, dtype: int64\n",
      "0    1017\n",
      "1      20\n",
      "Name: possCurrMhd_Personality, dtype: int64\n",
      "0    1014\n",
      "1      23\n",
      "Name: possCurrMhd_Ptsd, dtype: int64\n",
      "0    1018\n",
      "1      19\n",
      "Name: possCurrMhd_StressResponse, dtype: int64\n",
      "0    1030\n",
      "1       7\n",
      "Name: possCurrMhd_SubstanceUse, dtype: int64\n",
      "0    1025\n",
      "1      12\n",
      "Name: diagMhd_Addictive, dtype: int64\n",
      "0    755\n",
      "1    282\n",
      "Name: diagMhd_Anxiety, dtype: int64\n",
      "0    933\n",
      "1    104\n",
      "Name: diagMhd_Attention, dtype: int64\n",
      "0    1030\n",
      "1       7\n",
      "Name: diagMhd_Dissociative, dtype: int64\n",
      "0    1007\n",
      "1      30\n",
      "Name: diagMhd_Eating, dtype: int64\n",
      "0    718\n",
      "1    319\n",
      "Name: diagMhd_Mood, dtype: int64\n",
      "0    998\n",
      "1     39\n",
      "Name: diagMhd_Ocd, dtype: int64\n",
      "0    1015\n",
      "1      22\n",
      "Name: diagMhd_Personality, dtype: int64\n",
      "0    973\n",
      "1     64\n",
      "Name: diagMhd_Ptsd, dtype: int64\n",
      "0    1022\n",
      "1      15\n",
      "Name: diagMhd_Psychotic, dtype: int64\n",
      "0    1027\n",
      "1      10\n",
      "Name: diagMhd_StressResponse, dtype: int64\n",
      "0    1011\n",
      "1      26\n",
      "Name: diagMhd_SubstanceUse, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "disorder_col_names = [\"possCurrMhd_Addictive\", \"possCurrMhd_Anxiety\", \"possCurrMhd_Attention\", \"possCurrMhd_Dissociative\",\n",
    "                      \"possCurrMhd_Eating\", \"possCurrMhd_Mood\", \"possCurrMhd_Ocd\", \"possCurrMhd_Personality\", \"possCurrMhd_Ptsd\",\n",
    "                      \"possCurrMhd_StressResponse\", \"possCurrMhd_SubstanceUse\", \"diagMhd_Addictive\",\n",
    "                      \"diagMhd_Anxiety\", \"diagMhd_Attention\", \"diagMhd_Dissociative\", \"diagMhd_Eating\", \"diagMhd_Mood\",\n",
    "                      \"diagMhd_Ocd\", \"diagMhd_Personality\", \"diagMhd_Ptsd\", \"diagMhd_Psychotic\", \"diagMhd_StressResponse\",\n",
    "                      \"diagMhd_SubstanceUse\"]\n",
    "def check_disorder(x):\n",
    "    if x not in [0,1]: return 1\n",
    "    else: return x\n",
    "\n",
    "for col in disorder_col_names:\n",
    "    X[col] = X[col].fillna(0)\n",
    "    X[col] = X[col].apply(lambda x: check_disorder(x))\n",
    "\n",
    "# checking the correct encoding\n",
    "for col in disorder_col_names:\n",
    "    print(X[col].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Address Missing Data - Second Pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['discussedWithCoworkers', 'discussedOtherCoworker', 'pastMhd'], dtype='object')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#identify columns that are still missing data\n",
    "X.columns[X.isnull().any()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate if pastMhd is MAR or MCAR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mhCareerImpactLvl\n",
      "\tchi2 value:  23.082389030001114\n",
      "\tp-value:  0.0032600631597980885\n",
      "currMhd_Yes\n",
      "\tchi2 value:  12.423559633629218\n",
      "\tp-value:  0.0004239513891707154\n",
      "diagMhd_Yes\n",
      "\tchi2 value:  6.415902944520623\n",
      "\tp-value:  0.011310280250482503\n",
      "liveState_Alaska\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveState_Arizona\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "liveState_Connecticut\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveState_District of Columbia\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "liveState_Idaho\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveState_Kentucky\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "liveState_Louisiana\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveState_Maine\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveState_Montana\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveState_Nevada\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "liveState_New Mexico\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveState_North Dakota\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "liveState_Oklahoma\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveState_Rhode Island\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveState_South Carolina\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "liveState_Wyoming\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Alaska\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Arizona\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "workState_Connecticut\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workState_Idaho\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workState_Kentucky\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "workState_Louisiana\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Maine\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Mississippi\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Montana\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Nevada\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workState_New Hampshire\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workState_New Mexico\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_North Dakota\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workState_Oklahoma\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_Rhode Island\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workState_South Carolina\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workState_Wyoming\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Austria\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Bangladesh\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Belgium\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Bulgaria\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Colombia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Czech Republic\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Estonia\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Finland\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "liveCountry_Ghana\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Greece\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Hong Kong\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Hungary\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Iceland\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_India\n",
      "\tchi2 value:  9.23148775298393\n",
      "\tp-value:  0.0023788827607378006\n",
      "liveCountry_Indonesia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Israel\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Italy\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "liveCountry_Japan\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "liveCountry_Macedonia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Mauritius\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_New Zealand\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "liveCountry_Nigeria\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Norway\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "liveCountry_Pakistan\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Romania\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "liveCountry_Russia\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Serbia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Slovakia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "liveCountry_Sweden\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Turkey\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Ukraine\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "liveCountry_Uruguay\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Austria\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Bangladesh\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Belgium\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Bulgaria\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Colombia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Estonia\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Finland\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workCountry_Ghana\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Greece\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Hong Kong\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Iceland\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_India\n",
      "\tchi2 value:  9.23148775298393\n",
      "\tp-value:  0.0023788827607378006\n",
      "workCountry_Indonesia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Israel\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Italy\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "workCountry_Japan\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "workCountry_Luxembourg\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Macedonia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Mauritius\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_New Zealand\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workCountry_Nigeria\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Norway\n",
      "\tchi2 value:  5.006691489245815\n",
      "\tp-value:  0.025249518379813297\n",
      "workCountry_Other\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Pakistan\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Romania\n",
      "\tchi2 value:  6.981928314385726\n",
      "\tp-value:  0.00823368456118514\n",
      "workCountry_Russia\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Serbia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Slovakia\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "workCountry_Sweden\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Turkey\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Ukraine\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "workCountry_Uruguay\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n",
      "gender_trans female\n",
      "\tchi2 value:  10.942255988566057\n",
      "\tp-value:  0.0009399564969444786\n",
      "gender_trans male\n",
      "\tchi2 value:  22.842889989271566\n",
      "\tp-value:  1.7579845430411898e-06\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pastMhd_Missing\n",
      "\tchi2 value:  943.9053016151767\n",
      "\tp-value:  2.8027540698000512e-207\n"
     ]
    }
   ],
   "source": [
    "# 'Have you had a mental health disorder in the past?' = pastMhd\n",
    "# -----> Determine if MCAR or MAR using a chi-square test against all other columns\n",
    "\n",
    "from scipy import stats\n",
    "\n",
    "X['pastMhd_Missing'] = X['pastMhd']\n",
    "for i,entry in enumerate(X['pastMhd_Missing']):\n",
    "    if nan.match(str(entry).lower()):\n",
    "        X.iloc[i,X.columns.get_loc('pastMhd_Missing')] = 1\n",
    "    else:\n",
    "        X.iloc[i,X.columns.get_loc('pastMhd_Missing')] = 0\n",
    "        \n",
    "for col in X.columns:\n",
    "    cont_table = pd.crosstab(X[col],X['pastMhd_Missing'],margins = False) \n",
    "    chi2, p, dof, exp = stats.chi2_contingency(cont_table)\n",
    "    if p<0.05: #only print if there is possible significance\n",
    "        print(col)\n",
    "        print('\\tchi2 value: ', chi2)\n",
    "        print('\\tp-value: ',p)\n",
    "            \n",
    "X=X.drop(columns=['pastMhd_Missing'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Treat pastMhd as MAR since chi-square testing shows that missing values may be related to other columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN Imputation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Impute values for discussedWithCoworkers, discussedOtherCoworker, pastMhd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Create data subsets for each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#build datasets to predict values for each missing column.\n",
    "#for each dataset:\n",
    "    #target variable = column we are predicting missing values for\n",
    "    #for each dataset, drop the other missing columns so we can run these simultaneously\n",
    "\n",
    "#pastMhd\n",
    "pastMhd_df = X.drop(['discussedWithCoworkers','discussedOtherCoworker'],axis=1,inplace=False)\n",
    "y_pastMhd = pastMhd_df['pastMhd']\n",
    "X_pastMhd = pastMhd_df.drop(['pastMhd'],axis=1)\n",
    "\n",
    "#discussedWithCoworkers\n",
    "withCoworkers_df = X.drop(['pastMhd','discussedOtherCoworker'],axis=1,inplace=False)\n",
    "y_withCoworkers = withCoworkers_df['discussedWithCoworkers']\n",
    "X_withCoworkers = withCoworkers_df.drop(['discussedWithCoworkers'],axis=1,inplace=False)\n",
    "\n",
    "#discussedOtherCoworker\n",
    "otherCoworkers_df = X.drop(['discussedWithCoworkers','pastMhd'],axis=1,inplace=False)\n",
    "y_otherCoworkers = otherCoworkers_df['discussedOtherCoworker']\n",
    "X_otherCoworkers = otherCoworkers_df.drop(['discussedOtherCoworker'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Tune KNN models for each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pastMhd // Best K 7 Accuracy 0.6567656765676567\n",
      "withCoworkers // Best K 9 Accuracy 0.6957928802588996\n",
      "otherCoworkers // Best K 17 Accuracy 0.6440129449838188\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import metrics, neighbors\n",
    "\n",
    "#split up the data into train, validation, and test sets\n",
    "def split_data(X,y):\n",
    "    #separate out missing data for our test set\n",
    "    y_test = y[y.isnull()]\n",
    "    missing_ix = y[y.isnull()].index.tolist()\n",
    "    X_test = X.iloc[missing_ix]\n",
    "    \n",
    "    #reserve non-missing data for training and validation\n",
    "    y_temp = y.drop(index=missing_ix,inplace=False)\n",
    "    X_temp = X.drop(index=missing_ix,inplace=False)\n",
    "    X_train, X_holdout, y_train, y_holdout = train_test_split(X_temp,y_temp,test_size=0.30,random_state=100)\n",
    "    \n",
    "    return missing_ix, X_train, X_holdout, y_train, y_holdout, X_test, y_test\n",
    "\n",
    "#find the best k for predicting missing values with KNN\n",
    "def knn_findk(X_train,X_holdout,y_train,y_holdout):\n",
    "    #run on a bunch of values of k, find the k with the best accuracy\n",
    "    acc,ks=[],[]\n",
    "    for i in range(1,21):\n",
    "        neigh = neighbors.KNeighborsClassifier(n_neighbors=i)\n",
    "        neigh.fit(X_train,y_train)\n",
    "        y_pred = neigh.predict(X_holdout)\n",
    "        ks.append(i)\n",
    "        acc.append(metrics.accuracy_score(y_holdout,y_pred))\n",
    "    ks = np.asarray(ks)\n",
    "    acc = np.asarray(acc)\n",
    "    best_ix = (-acc).argsort()[:1]\n",
    "    \n",
    "    return ks[best_ix][0], acc[best_ix][0]\n",
    "\n",
    "pastMhd_ix,pastMhd_Xtrain,pastMhd_Xholdout,pastMhd_ytrain,pastMhd_yholdout,pastMhd_Xtest,pastMhd_ytest = split_data(X_pastMhd,y_pastMhd)\n",
    "pastMhd_k,pastMhd_acc = knn_findk(pastMhd_Xtrain,pastMhd_Xholdout,pastMhd_ytrain,pastMhd_yholdout)\n",
    "\n",
    "withCoworkers_ix,withCoworkers_Xtrain,withCoworkers_Xholdout,withCoworkers_ytrain,withCoworkers_yholdout,withCoworkers_Xtest,withCoworkers_ytest = split_data(X_withCoworkers,y_withCoworkers)\n",
    "withCoworkers_k,withCoworkers_acc = knn_findk(withCoworkers_Xtrain,withCoworkers_Xholdout,withCoworkers_ytrain,withCoworkers_yholdout)\n",
    "\n",
    "otherCoworkers_ix,otherCoworkers_Xtrain,otherCoworkers_Xholdout,otherCoworkers_ytrain,otherCoworkers_yholdout,otherCoworkers_Xtest,otherCoworkers_ytest = split_data(X_otherCoworkers,y_otherCoworkers)\n",
    "otherCoworkers_k,otherCoworkers_acc = knn_findk(otherCoworkers_Xtrain,otherCoworkers_Xholdout,otherCoworkers_ytrain,otherCoworkers_yholdout)\n",
    "\n",
    "print('pastMhd //','Best K',pastMhd_k,'Accuracy',pastMhd_acc)\n",
    "print('withCoworkers //','Best K',withCoworkers_k,'Accuracy',withCoworkers_acc)\n",
    "print('otherCoworkers //','Best K',otherCoworkers_k,'Accuracy',otherCoworkers_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Predict missing values with optimal k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Possibly' 'Yes' 'Yes' 'Yes' \"Don't Know\" 'Yes' 'Yes' 'Yes' 'Yes' 'Yes'\n",
      " 'Yes']\n",
      "[0. 0. 0.]\n",
      "[1. 0. 0. 1. 1.]\n"
     ]
    }
   ],
   "source": [
    "#predict the missing values using the best k for each column\n",
    "neigh = neighbors.KNeighborsClassifier(n_neighbors=pastMhd_k)\n",
    "neigh.fit(pastMhd_Xtrain,pastMhd_ytrain)\n",
    "pastMhd_ypred = neigh.predict(pastMhd_Xtest)\n",
    "\n",
    "neigh = neighbors.KNeighborsClassifier(n_neighbors=withCoworkers_k)\n",
    "neigh.fit(withCoworkers_Xtrain,withCoworkers_ytrain)\n",
    "withCoworkers_ypred = neigh.predict(withCoworkers_Xtest)\n",
    "\n",
    "neigh = neighbors.KNeighborsClassifier(n_neighbors=otherCoworkers_k)\n",
    "neigh.fit(otherCoworkers_Xtrain,otherCoworkers_ytrain)\n",
    "otherCoworkers_ypred = neigh.predict(otherCoworkers_Xtest)\n",
    "\n",
    "print(pastMhd_ypred)\n",
    "print(withCoworkers_ypred)\n",
    "print(otherCoworkers_ypred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Update dataset X with predicted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes           470\n",
      "No            308\n",
      "Possibly      190\n",
      "Don't Know     69\n",
      "Name: pastMhd, dtype: int64\n",
      "0.0    586\n",
      "1.0    451\n",
      "Name: discussedWithCoworkers, dtype: int64\n",
      "0.0    535\n",
      "1.0    502\n",
      "Name: discussedOtherCoworker, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#impute predictions into the original dataset\n",
    "    # discussedWithCoworkers\n",
    "    # discussedOtherCoworker\n",
    "    # pastMhd\n",
    "    \n",
    "for i,ix in enumerate(pastMhd_ix):\n",
    "    X.at[ix,'pastMhd']=pastMhd_ypred[i]\n",
    "    \n",
    "for i,ix in enumerate(withCoworkers_ix):\n",
    "    X.at[ix,'discussedWithCoworkers']=withCoworkers_ypred[i]\n",
    "    \n",
    "for i,ix in enumerate(otherCoworkers_ix):\n",
    "    X.at[ix,'discussedOtherCoworker']=otherCoworkers_ypred[i]\n",
    "\n",
    "print(X['pastMhd'].value_counts())\n",
    "print(X['discussedWithCoworkers'].value_counts())\n",
    "print(X['discussedOtherCoworker'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check -- no more missing data!\n",
    "X.columns[X.isnull().any()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Encode these columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#these variables are nominal, so one-hot encode\n",
    "X = pd.get_dummies(X, columns=['pastMhd','discussedWithCoworkers','discussedOtherCoworker'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mhCareerImpactLvl\n",
      "numEmp\n",
      "willingToShareFamFriendsLvl\n",
      "mhLeaveDifficultyLvl\n",
      "perceivedTeamReactionLvl\n",
      "mhWorkInterfereLvl_EffTreat\n",
      "mhWorkInterfereLvl_IneffTreat\n",
      "perceivedEmpMhImpLvl\n",
      "perceivedEmpPhImpLvl\n",
      "perceivedTechIndustrySupportLvl\n",
      "age\n",
      "year\n",
      "diagMhd_Addictive\n",
      "diagMhd_Anxiety\n",
      "diagMhd_Attention\n",
      "diagMhd_Dissociative\n",
      "diagMhd_Eating\n",
      "diagMhd_Mood\n",
      "diagMhd_Ocd\n",
      "diagMhd_Personality\n",
      "diagMhd_Psychotic\n",
      "diagMhd_Ptsd\n",
      "diagMhd_StressResponse\n",
      "diagMhd_SubstanceUse\n",
      "possCurrMhd_Addictive\n",
      "possCurrMhd_Anxiety\n",
      "possCurrMhd_Attention\n",
      "possCurrMhd_Dissociative\n",
      "possCurrMhd_Eating\n",
      "possCurrMhd_Mood\n",
      "possCurrMhd_Ocd\n",
      "possCurrMhd_Personality\n",
      "possCurrMhd_Ptsd\n",
      "possCurrMhd_StressResponse\n",
      "possCurrMhd_SubstanceUse\n",
      "prevEmployers_1\n",
      "obsPrevBadResp_No\n",
      "obsPrevBadResp_Yes, I experienced\n",
      "obsPrevBadResp_Yes, I observed\n",
      "obsPrevGoodResp_Maybe/Not sure\n",
      "obsPrevGoodResp_No\n",
      "obsPrevGoodResp_Yes, I experienced\n",
      "obsPrevGoodResp_Yes, I observed\n",
      "mhOpenAtWork_1.0\n",
      "currMhd_No\n",
      "currMhd_Possibly\n",
      "currMhd_Yes\n",
      "famHistMhd_No\n",
      "famHistMhd_Yes\n",
      "empMhCvgKnowledge_Yes\n",
      "empMhCvgKnowledge_not applicable\n",
      "empMhResourcesAvail_No\n",
      "empMhResourcesAvail_Yes\n",
      "empMhCvgBenefits_No\n",
      "empMhCvgBenefits_Not eligible for coverage / NA\n",
      "empMhCvgBenefits_Yes\n",
      "mhOpenAtWorkImpact_1.0\n",
      "mhOpenAtWorkImpact_not applicable\n",
      "empMhDiscuss_No\n",
      "empMhDiscuss_Yes\n",
      "diagMhd_Yes\n",
      "discussedWithEmployer_1.0\n",
      "soughtTreatment_1\n",
      "mhOtherObsImpact_No\n",
      "mhOtherObsImpact_Yes\n",
      "mhOtherObsImpact_not applicable\n",
      "empAnonProtection_No\n",
      "empAnonProtection_Yes\n",
      "techCompany_1.0\n",
      "techRole_1.0\n",
      "liveState_Alaska\n",
      "liveState_Arizona\n",
      "liveState_California\n",
      "liveState_Colorado\n",
      "liveState_Connecticut\n",
      "liveState_District of Columbia\n",
      "liveState_Florida\n",
      "liveState_Georgia\n",
      "liveState_Idaho\n",
      "liveState_Illinois\n",
      "liveState_Indiana\n",
      "liveState_Iowa\n",
      "liveState_Kansas\n",
      "liveState_Kentucky\n",
      "liveState_Louisiana\n",
      "liveState_Maine\n",
      "liveState_Maryland\n",
      "liveState_Massachusetts\n",
      "liveState_Michigan\n",
      "liveState_Minnesota\n",
      "liveState_Missouri\n",
      "liveState_Montana\n",
      "liveState_Nebraska\n",
      "liveState_Nevada\n",
      "liveState_New Hampshire\n",
      "liveState_New Jersey\n",
      "liveState_New Mexico\n",
      "liveState_New York\n",
      "liveState_North Carolina\n",
      "liveState_North Dakota\n",
      "liveState_Ohio\n",
      "liveState_Oklahoma\n",
      "liveState_Oregon\n",
      "liveState_Pennsylvania\n",
      "liveState_Rhode Island\n",
      "liveState_South Carolina\n",
      "liveState_Tennessee\n",
      "liveState_Texas\n",
      "liveState_Utah\n",
      "liveState_Virginia\n",
      "liveState_Washington\n",
      "liveState_Wisconsin\n",
      "liveState_Wyoming\n",
      "liveState_not applicable\n",
      "workState_Alaska\n",
      "workState_Arizona\n",
      "workState_California\n",
      "workState_Colorado\n",
      "workState_Connecticut\n",
      "workState_District of Columbia\n",
      "workState_Florida\n",
      "workState_Georgia\n",
      "workState_Idaho\n",
      "workState_Illinois\n",
      "workState_Indiana\n",
      "workState_Iowa\n",
      "workState_Kansas\n",
      "workState_Kentucky\n",
      "workState_Louisiana\n",
      "workState_Maine\n",
      "workState_Maryland\n",
      "workState_Massachusetts\n",
      "workState_Michigan\n",
      "workState_Minnesota\n",
      "workState_Mississippi\n",
      "workState_Missouri\n",
      "workState_Montana\n",
      "workState_Nebraska\n",
      "workState_Nevada\n",
      "workState_New Hampshire\n",
      "workState_New Jersey\n",
      "workState_New Mexico\n",
      "workState_New York\n",
      "workState_North Carolina\n",
      "workState_North Dakota\n",
      "workState_Ohio\n",
      "workState_Oklahoma\n",
      "workState_Oregon\n",
      "workState_Pennsylvania\n",
      "workState_Rhode Island\n",
      "workState_South Carolina\n",
      "workState_Tennessee\n",
      "workState_Texas\n",
      "workState_Utah\n",
      "workState_Virginia\n",
      "workState_Washington\n",
      "workState_Wisconsin\n",
      "workState_Wyoming\n",
      "workState_not applicable\n",
      "liveCountry_Australia\n",
      "liveCountry_Austria\n",
      "liveCountry_Bangladesh\n",
      "liveCountry_Belgium\n",
      "liveCountry_Brazil\n",
      "liveCountry_Bulgaria\n",
      "liveCountry_Canada\n",
      "liveCountry_Colombia\n",
      "liveCountry_Czech Republic\n",
      "liveCountry_Estonia\n",
      "liveCountry_Finland\n",
      "liveCountry_France\n",
      "liveCountry_Germany\n",
      "liveCountry_Ghana\n",
      "liveCountry_Greece\n",
      "liveCountry_Hong Kong\n",
      "liveCountry_Hungary\n",
      "liveCountry_Iceland\n",
      "liveCountry_India\n",
      "liveCountry_Indonesia\n",
      "liveCountry_Ireland\n",
      "liveCountry_Israel\n",
      "liveCountry_Italy\n",
      "liveCountry_Japan\n",
      "liveCountry_Macedonia\n",
      "liveCountry_Mauritius\n",
      "liveCountry_Mexico\n",
      "liveCountry_Netherlands\n",
      "liveCountry_New Zealand\n",
      "liveCountry_Nigeria\n",
      "liveCountry_Norway\n",
      "liveCountry_Pakistan\n",
      "liveCountry_Poland\n",
      "liveCountry_Portugal\n",
      "liveCountry_Romania\n",
      "liveCountry_Russia\n",
      "liveCountry_Serbia\n",
      "liveCountry_Slovakia\n",
      "liveCountry_South Africa\n",
      "liveCountry_Spain\n",
      "liveCountry_Sweden\n",
      "liveCountry_Switzerland\n",
      "liveCountry_Turkey\n",
      "liveCountry_Ukraine\n",
      "liveCountry_United Kingdom\n",
      "liveCountry_United States of America\n",
      "liveCountry_Uruguay\n",
      "workCountry_Australia\n",
      "workCountry_Austria\n",
      "workCountry_Bangladesh\n",
      "workCountry_Belgium\n",
      "workCountry_Brazil\n",
      "workCountry_Bulgaria\n",
      "workCountry_Canada\n",
      "workCountry_Colombia\n",
      "workCountry_Estonia\n",
      "workCountry_Finland\n",
      "workCountry_France\n",
      "workCountry_Germany\n",
      "workCountry_Ghana\n",
      "workCountry_Greece\n",
      "workCountry_Hong Kong\n",
      "workCountry_Iceland\n",
      "workCountry_India\n",
      "workCountry_Indonesia\n",
      "workCountry_Ireland\n",
      "workCountry_Israel\n",
      "workCountry_Italy\n",
      "workCountry_Japan\n",
      "workCountry_Luxembourg\n",
      "workCountry_Macedonia\n",
      "workCountry_Mauritius\n",
      "workCountry_Mexico\n",
      "workCountry_Netherlands\n",
      "workCountry_New Zealand\n",
      "workCountry_Nigeria\n",
      "workCountry_Norway\n",
      "workCountry_Other\n",
      "workCountry_Pakistan\n",
      "workCountry_Poland\n",
      "workCountry_Portugal\n",
      "workCountry_Romania\n",
      "workCountry_Russia\n",
      "workCountry_Serbia\n",
      "workCountry_Slovakia\n",
      "workCountry_South Africa\n",
      "workCountry_Spain\n",
      "workCountry_Sweden\n",
      "workCountry_Switzerland\n",
      "workCountry_Turkey\n",
      "workCountry_Ukraine\n",
      "workCountry_United Kingdom\n",
      "workCountry_United States of America\n",
      "workCountry_Uruguay\n",
      "gender_cis male\n",
      "gender_genderqueer/non-binary\n",
      "gender_other\n",
      "gender_trans female\n",
      "gender_trans male\n",
      "willingDiscussPhInterview_No\n",
      "willingDiscussPhInterview_Yes\n",
      "willingDiscussMhInterview_No\n",
      "willingDiscussMhInterview_Yes\n",
      "comfortDiscussMhCoworker_No\n",
      "comfortDiscussMhCoworker_Yes\n",
      "comfortDiscussPhSupervisor_Physical health\n",
      "comfortDiscussPhSupervisor_Same level of comfort for each\n",
      "pastMhd_No\n",
      "pastMhd_Possibly\n",
      "pastMhd_Yes\n",
      "discussedWithCoworkers_1.0\n",
      "discussedOtherCoworker_1.0\n"
     ]
    }
   ],
   "source": [
    "#check column names\n",
    "col_names = X.columns\n",
    "for x in col_names:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectPercentile, f_classif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Choosing the top [x] percentile of features with the highest ANOVA F-value between label/feature for classification tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mhCareerImpactLvl</th>\n",
       "      <th>numEmp</th>\n",
       "      <th>willingToShareFamFriendsLvl</th>\n",
       "      <th>mhLeaveDifficultyLvl</th>\n",
       "      <th>perceivedTeamReactionLvl</th>\n",
       "      <th>mhWorkInterfereLvl_EffTreat</th>\n",
       "      <th>mhWorkInterfereLvl_IneffTreat</th>\n",
       "      <th>perceivedEmpMhImpLvl</th>\n",
       "      <th>perceivedEmpPhImpLvl</th>\n",
       "      <th>perceivedTechIndustrySupportLvl</th>\n",
       "      <th>...</th>\n",
       "      <th>willingDiscussMhInterview_No</th>\n",
       "      <th>willingDiscussMhInterview_Yes</th>\n",
       "      <th>comfortDiscussMhCoworker_No</th>\n",
       "      <th>comfortDiscussMhCoworker_Yes</th>\n",
       "      <th>comfortDiscussPhSupervisor_Physical health</th>\n",
       "      <th>comfortDiscussPhSupervisor_Same level of comfort for each</th>\n",
       "      <th>pastMhd_No</th>\n",
       "      <th>pastMhd_Possibly</th>\n",
       "      <th>discussedWithCoworkers_1.0</th>\n",
       "      <th>discussedOtherCoworker_1.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>344</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>345</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 108 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     mhCareerImpactLvl  numEmp  willingToShareFamFriendsLvl  \\\n",
       "0                    0       4                            6   \n",
       "1                    0       4                            5   \n",
       "2                    4       2                            6   \n",
       "3                    0       6                           11   \n",
       "5                    0       4                            6   \n",
       "..                 ...     ...                          ...   \n",
       "344                  0       4                            9   \n",
       "345                  1       3                           11   \n",
       "346                  0       2                            6   \n",
       "347                  0       6                           10   \n",
       "351                  4       6                           11   \n",
       "\n",
       "     mhLeaveDifficultyLvl  perceivedTeamReactionLvl  \\\n",
       "0                       3                        11   \n",
       "1                       3                         7   \n",
       "2                       5                         6   \n",
       "3                       5                         6   \n",
       "5                       2                         5   \n",
       "..                    ...                       ...   \n",
       "344                     4                         5   \n",
       "345                     1                         6   \n",
       "346                     1                         7   \n",
       "347                     4                         2   \n",
       "351                     4                         4   \n",
       "\n",
       "     mhWorkInterfereLvl_EffTreat  mhWorkInterfereLvl_IneffTreat  \\\n",
       "0                              3                              3   \n",
       "1                              0                              3   \n",
       "2                              3                              3   \n",
       "3                              3                              4   \n",
       "5                              2                              0   \n",
       "..                           ...                            ...   \n",
       "344                            4                              4   \n",
       "345                            3                              4   \n",
       "346                            0                              4   \n",
       "347                            3                              3   \n",
       "351                            3                              4   \n",
       "\n",
       "     perceivedEmpMhImpLvl  perceivedEmpPhImpLvl  \\\n",
       "0                       1                     7   \n",
       "1                       3                     8   \n",
       "2                       2                     1   \n",
       "3                       6                     8   \n",
       "5                       6                    10   \n",
       "..                    ...                   ...   \n",
       "344                     3                     5   \n",
       "345                     8                     9   \n",
       "346                     6                     9   \n",
       "347                     6                     6   \n",
       "351                     4                     6   \n",
       "\n",
       "     perceivedTechIndustrySupportLvl  ...  willingDiscussMhInterview_No  \\\n",
       "0                                  1  ...                             1   \n",
       "1                                  2  ...                             1   \n",
       "2                                  1  ...                             1   \n",
       "3                                  2  ...                             1   \n",
       "5                                  2  ...                             1   \n",
       "..                               ...  ...                           ...   \n",
       "344                                3  ...                             1   \n",
       "345                                2  ...                             0   \n",
       "346                                3  ...                             1   \n",
       "347                                3  ...                             1   \n",
       "351                                3  ...                             0   \n",
       "\n",
       "     willingDiscussMhInterview_Yes  comfortDiscussMhCoworker_No  \\\n",
       "0                                0                            0   \n",
       "1                                0                            0   \n",
       "2                                0                            0   \n",
       "3                                0                            0   \n",
       "5                                0                            0   \n",
       "..                             ...                          ...   \n",
       "344                              0                            1   \n",
       "345                              0                            0   \n",
       "346                              0                            1   \n",
       "347                              0                            1   \n",
       "351                              1                            1   \n",
       "\n",
       "     comfortDiscussMhCoworker_Yes  comfortDiscussPhSupervisor_Physical health  \\\n",
       "0                               1                                           0   \n",
       "1                               1                                           0   \n",
       "2                               0                                           0   \n",
       "3                               1                                           0   \n",
       "5                               0                                           1   \n",
       "..                            ...                                         ...   \n",
       "344                             0                                           1   \n",
       "345                             1                                           0   \n",
       "346                             0                                           1   \n",
       "347                             0                                           1   \n",
       "351                             0                                           1   \n",
       "\n",
       "     comfortDiscussPhSupervisor_Same level of comfort for each  pastMhd_No  \\\n",
       "0                                                    1                   0   \n",
       "1                                                    1                   0   \n",
       "2                                                    1                   0   \n",
       "3                                                    1                   1   \n",
       "5                                                    0                   1   \n",
       "..                                                 ...                 ...   \n",
       "344                                                  0                   0   \n",
       "345                                                  1                   0   \n",
       "346                                                  0                   1   \n",
       "347                                                  0                   1   \n",
       "351                                                  0                   0   \n",
       "\n",
       "     pastMhd_Possibly  discussedWithCoworkers_1.0  discussedOtherCoworker_1.0  \n",
       "0                   1                           1                           1  \n",
       "1                   1                           1                           1  \n",
       "2                   0                           1                           0  \n",
       "3                   0                           1                           0  \n",
       "5                   0                           0                           0  \n",
       "..                ...                         ...                         ...  \n",
       "344                 0                           0                           0  \n",
       "345                 0                           1                           1  \n",
       "346                 0                           0                           0  \n",
       "347                 0                           0                           0  \n",
       "351                 0                           1                           0  \n",
       "\n",
       "[1037 rows x 108 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Try for Random Forest, Boosting, and SVM\n",
    "# top 40 percent\n",
    "X_new = SelectPercentile(f_classif, percentile=40)\n",
    "X_new.fit_transform(X, y)\n",
    "\n",
    "best_ind = [i for i,entry in enumerate(X_new.get_support()) if entry==True]\n",
    "\n",
    "X_selected_40 = X.iloc[:,best_ind]\n",
    "X_selected_40"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>willingToShareFamFriendsLvl</th>\n",
       "      <th>mhLeaveDifficultyLvl</th>\n",
       "      <th>perceivedTeamReactionLvl</th>\n",
       "      <th>perceivedEmpMhImpLvl</th>\n",
       "      <th>perceivedTechIndustrySupportLvl</th>\n",
       "      <th>obsPrevGoodResp_No</th>\n",
       "      <th>discussedWithEmployer_1.0</th>\n",
       "      <th>mhOtherObsImpact_No</th>\n",
       "      <th>willingDiscussMhInterview_No</th>\n",
       "      <th>comfortDiscussMhCoworker_No</th>\n",
       "      <th>comfortDiscussMhCoworker_Yes</th>\n",
       "      <th>comfortDiscussPhSupervisor_Physical health</th>\n",
       "      <th>comfortDiscussPhSupervisor_Same level of comfort for each</th>\n",
       "      <th>discussedWithCoworkers_1.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>344</th>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>345</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     willingToShareFamFriendsLvl  mhLeaveDifficultyLvl  \\\n",
       "0                              6                     3   \n",
       "1                              5                     3   \n",
       "2                              6                     5   \n",
       "3                             11                     5   \n",
       "5                              6                     2   \n",
       "..                           ...                   ...   \n",
       "344                            9                     4   \n",
       "345                           11                     1   \n",
       "346                            6                     1   \n",
       "347                           10                     4   \n",
       "351                           11                     4   \n",
       "\n",
       "     perceivedTeamReactionLvl  perceivedEmpMhImpLvl  \\\n",
       "0                          11                     1   \n",
       "1                           7                     3   \n",
       "2                           6                     2   \n",
       "3                           6                     6   \n",
       "5                           5                     6   \n",
       "..                        ...                   ...   \n",
       "344                         5                     3   \n",
       "345                         6                     8   \n",
       "346                         7                     6   \n",
       "347                         2                     6   \n",
       "351                         4                     4   \n",
       "\n",
       "     perceivedTechIndustrySupportLvl  obsPrevGoodResp_No  \\\n",
       "0                                  1                   0   \n",
       "1                                  2                   0   \n",
       "2                                  1                   0   \n",
       "3                                  2                   0   \n",
       "5                                  2                   0   \n",
       "..                               ...                 ...   \n",
       "344                                3                   0   \n",
       "345                                2                   1   \n",
       "346                                3                   1   \n",
       "347                                3                   0   \n",
       "351                                3                   1   \n",
       "\n",
       "     discussedWithEmployer_1.0  mhOtherObsImpact_No  \\\n",
       "0                            0                    1   \n",
       "1                            0                    1   \n",
       "2                            1                    0   \n",
       "3                            1                    1   \n",
       "5                            0                    0   \n",
       "..                         ...                  ...   \n",
       "344                          0                    0   \n",
       "345                          1                    1   \n",
       "346                          0                    0   \n",
       "347                          0                    0   \n",
       "351                          1                    0   \n",
       "\n",
       "     willingDiscussMhInterview_No  comfortDiscussMhCoworker_No  \\\n",
       "0                               1                            0   \n",
       "1                               1                            0   \n",
       "2                               1                            0   \n",
       "3                               1                            0   \n",
       "5                               1                            0   \n",
       "..                            ...                          ...   \n",
       "344                             1                            1   \n",
       "345                             0                            0   \n",
       "346                             1                            1   \n",
       "347                             1                            1   \n",
       "351                             0                            1   \n",
       "\n",
       "     comfortDiscussMhCoworker_Yes  comfortDiscussPhSupervisor_Physical health  \\\n",
       "0                               1                                           0   \n",
       "1                               1                                           0   \n",
       "2                               0                                           0   \n",
       "3                               1                                           0   \n",
       "5                               0                                           1   \n",
       "..                            ...                                         ...   \n",
       "344                             0                                           1   \n",
       "345                             1                                           0   \n",
       "346                             0                                           1   \n",
       "347                             0                                           1   \n",
       "351                             0                                           1   \n",
       "\n",
       "     comfortDiscussPhSupervisor_Same level of comfort for each  \\\n",
       "0                                                    1           \n",
       "1                                                    1           \n",
       "2                                                    1           \n",
       "3                                                    1           \n",
       "5                                                    0           \n",
       "..                                                 ...           \n",
       "344                                                  0           \n",
       "345                                                  1           \n",
       "346                                                  0           \n",
       "347                                                  0           \n",
       "351                                                  0           \n",
       "\n",
       "     discussedWithCoworkers_1.0  \n",
       "0                             1  \n",
       "1                             1  \n",
       "2                             1  \n",
       "3                             1  \n",
       "5                             0  \n",
       "..                          ...  \n",
       "344                           0  \n",
       "345                           1  \n",
       "346                           0  \n",
       "347                           0  \n",
       "351                           1  \n",
       "\n",
       "[1037 rows x 14 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Try for Logistic Regression, KNN, and Random Forest\n",
    "# top 5 percent\n",
    "X_new = SelectPercentile(f_classif, percentile=5)\n",
    "X_new.fit_transform(X, y)\n",
    "\n",
    "best_ind = [i for i,entry in enumerate(X_new.get_support()) if entry==True]\n",
    "\n",
    "X_selected_5 = X.iloc[:,best_ind]\n",
    "X_selected_5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run KNN, Logistic Regression, Random Forest, SVM, and Boosting on three separate versions of features:<br>\n",
    "   - X <br>\n",
    "   - X_selected_40 <br>\n",
    "   - X_selected_5 <br>\n",
    "\n",
    "Determine the best set of features to use and tune hyperparameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold, GridSearchCV, cross_val_score\n",
    "from sklearn import metrics, neighbors\n",
    "from sklearn.metrics import accuracy_score\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X\n",
      "Optimal num neighbors:  {'n_neighbors': 29}\n",
      "Mean score:  0.5564752879970272\n",
      "Feature set: X_selected_40\n",
      "Optimal num neighbors:  {'n_neighbors': 45}\n",
      "Mean score:  0.5593645484949833\n",
      "Feature set: X_selected_5\n",
      "Optimal num neighbors:  {'n_neighbors': 17}\n",
      "Mean score:  0.5747166480862133\n"
     ]
    }
   ],
   "source": [
    "#Use GridSearchCV with KNN: \n",
    "# GridSearchCV works by training our model multiple times on a range of parameters that we specify. \n",
    "# That way, we can test our model with each parameter and figure out the optimal values to get the best accuracy.\n",
    "# https://towardsdatascience.com/building-a-k-nearest-neighbors-k-nn-model-with-scikit-learn-51209555453a\n",
    "\n",
    "accuracies = []\n",
    "errors = []\n",
    "\n",
    "knn = neighbors.KNeighborsClassifier() #create a new KNN model\n",
    "param_grid = {'n_neighbors': np.arange(1, 51)} #dictionary of all k-values we want to test\n",
    "knn_gscv = GridSearchCV(knn, param_grid, cv=5) #use gridsearch to test k-values with 5 folds\n",
    "\n",
    "#Feature set: X\n",
    "knn_gscv.fit(X, y) #fit model to data\n",
    "accuracies.append(knn_gscv.best_score_)\n",
    "errors.append(1 - knn_gscv.best_score_)\n",
    "print('Feature set: X')\n",
    "print('Optimal num neighbors: ',knn_gscv.best_params_) # top performing n_neighbors value\n",
    "print('Mean score: ',knn_gscv.best_score_) # mean score for the top performing value of n_neighbors\n",
    "\n",
    "#Feature set: X_selected_40\n",
    "knn_gscv.fit(X_selected_40, y) #fit model to data\n",
    "accuracies.append(knn_gscv.best_score_)\n",
    "errors.append(1 - knn_gscv.best_score_)\n",
    "print('Feature set: X_selected_40')\n",
    "print('Optimal num neighbors: ',knn_gscv.best_params_) # top performing n_neighbors value\n",
    "print('Mean score: ',knn_gscv.best_score_) # mean score for the top performing value of n_neighbors\n",
    "\n",
    "#Feature set: X_selected_5\n",
    "knn_gscv.fit(X_selected_5, y) #fit model to data\n",
    "accuracies.append(knn_gscv.best_score_)\n",
    "errors.append(1 - knn_gscv.best_score_)\n",
    "print('Feature set: X_selected_5')\n",
    "print('Optimal num neighbors: ',knn_gscv.best_params_) # top performing n_neighbors value\n",
    "print('Mean score: ',knn_gscv.best_score_) # mean score for the top performing value of n_neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_sets = [\"X\", \"X_selected40\", \"X_selected_5\"]\n",
    "plt.plot(X_sets, accuracies, label = \"Classification Accuracy\")\n",
    "plt.plot(X_sets, errors, label = \"Classification Error\")\n",
    "plt.xlabel('Feature Selected Set')\n",
    "plt.ylabel('Rate')\n",
    "plt.title(\"KNN w/Tuned K - Accuracy per Feature Set\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "accuracies = []\n",
    "errors = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_model(model, y_test, y_pred):\n",
    "    accuracy = metrics.accuracy_score(y_test, y_pred)\n",
    "    accuracies.append(accuracy)\n",
    "    print('Classification Accuracy:', accuracy)\n",
    "    error = 1 - metrics.accuracy_score(y_test, y_pred)\n",
    "    errors.append(error)\n",
    "    print('Classification Error:', error)\n",
    "    \n",
    "    confusion = metrics.confusion_matrix(y_test, y_pred)\n",
    "    print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Accuracy: 0.5432692307692307\n",
      "Classification Error: 0.4567307692307693\n",
      "[[25 24 26]\n",
      " [13 32  9]\n",
      " [18  5 56]]\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression for X\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)\n",
    "logreg = LogisticRegression(random_state=0, solver='lbfgs', multi_class='ovr', max_iter=1000)\n",
    "logreg.fit(X_train, y_train)\n",
    "y_pred = logreg.predict(X_test)\n",
    "evaluate_model(logreg, y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Accuracy: 0.5576923076923077\n",
      "Classification Error: 0.4423076923076923\n",
      "[[24 24 27]\n",
      " [13 35  6]\n",
      " [15  7 57]]\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression for X_selected_40\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_selected_40, y, test_size=0.20, random_state=0)\n",
    "logreg = LogisticRegression(random_state=0, solver='lbfgs', multi_class='ovr', max_iter=1000)\n",
    "logreg.fit(X_train, y_train)\n",
    "y_pred = logreg.predict(X_test)\n",
    "evaluate_model(logreg, y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Accuracy: 0.6153846153846154\n",
      "Classification Error: 0.3846153846153846\n",
      "[[28 21 26]\n",
      " [10 38  6]\n",
      " [10  7 62]]\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression for X_selected_5\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_selected_5, y, test_size=0.20, random_state=0)\n",
    "logreg = LogisticRegression(random_state=0, solver='lbfgs', multi_class='ovr', max_iter=1000)\n",
    "logreg.fit(X_train, y_train)\n",
    "y_pred = logreg.predict(X_test)\n",
    "evaluate_model(logreg, y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_sets = [\"X\", \"X_selected40\", \"X_selected_5\"]\n",
    "plt.plot(X_sets, accuracies, label = \"Classification Accuracy\")\n",
    "plt.plot(X_sets, errors, label = \"Classification Error\")\n",
    "plt.xlabel('Feature Selected Set')\n",
    "plt.ylabel('Rate')\n",
    "plt.title(\"Logistic Regression - Accuracy per Feature Set\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Tuning for different hyperparameter values C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold, GridSearchCV, cross_val_score\n",
    "\n",
    "c_values = [0.1, 1.0, 10]\n",
    "logreg = LogisticRegression(random_state=0, solver='lbfgs', multi_class='ovr', max_iter=1000)\n",
    "param_grid = dict(C=c_values)\n",
    "logreg_gscv = GridSearchCV(logreg, param_grid, cv=5)\n",
    "\n",
    "accuracies=[]\n",
    "errors=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X\n",
      "Optimal C:  {'C': 0.1}\n",
      "Mean score:  0.5824228911185433\n",
      "Feature set: X_selected_40\n",
      "Optimal C:  {'C': 1.0}\n",
      "Mean score:  0.583361204013378\n",
      "Feature set: X_selected_5\n",
      "Optimal C:  {'C': 1.0}\n",
      "Mean score:  0.5853353771832033\n"
     ]
    }
   ],
   "source": [
    "#Feature set: X\n",
    "logreg_gscv.fit(X, y) #fit model to data\n",
    "accuracies.append(logreg_gscv.best_score_)\n",
    "errors.append(1 - logreg_gscv.best_score_)\n",
    "print('Feature set: X')\n",
    "print('Optimal C: ',logreg_gscv.best_params_) # top performing C\n",
    "print('Mean score: ',logreg_gscv.best_score_) # mean score for the top performing C\n",
    "\n",
    "#Feature set: X_selected_40\n",
    "logreg_gscv.fit(X_selected_40, y) #fit model to data\n",
    "accuracies.append(logreg_gscv.best_score_)\n",
    "errors.append(1 - logreg_gscv.best_score_)\n",
    "print('Feature set: X_selected_40')\n",
    "print('Optimal C: ',logreg_gscv.best_params_) # top performing C\n",
    "print('Mean score: ',logreg_gscv.best_score_) # mean score for the top performing C\n",
    "\n",
    "#Feature set: X_selected_5\n",
    "logreg_gscv.fit(X_selected_5, y) #fit model to data\n",
    "accuracies.append(logreg_gscv.best_score_)\n",
    "errors.append(1 - logreg_gscv.best_score_)\n",
    "print('Feature set: X_selected_5')\n",
    "print('Optimal C: ',logreg_gscv.best_params_) # top performing C\n",
    "print('Mean score: ',logreg_gscv.best_score_) # mean score for the top performing C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_sets = [\"X\", \"X_selected40\", \"X_selected_5\"]\n",
    "plt.plot(X_sets, accuracies, label = \"Classification Accuracy\")\n",
    "plt.plot(X_sets, errors, label = \"Classification Error\")\n",
    "plt.xlabel('Feature Selected Set')\n",
    "plt.ylabel('Rate')\n",
    "plt.title(\"Logistic Regression w/Tuned C - Accuracy per Feature Set\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "accuracies = []\n",
    "errors = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X\n",
      "[0.54807692 0.60096154 0.60386473 0.60869565 0.57004831]\n",
      "0.5863294314381271\n",
      "Feature set: X_selected_40\n",
      "[0.58173077 0.57211538 0.57971014 0.62318841 0.59903382]\n",
      "0.5911557041991824\n",
      "Feature set: X_selected_5\n",
      "[0.57211538 0.57692308 0.57971014 0.63285024 0.64251208]\n",
      "0.6008221850613156\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(random_state=0,n_estimators=100, max_depth=7)\n",
    "cv_results = cross_validate(rf, X, y, cv=5)\n",
    "accuracies.append(np.mean(cv_results['test_score']))\n",
    "errors.append(1-np.mean(cv_results['test_score']))\n",
    "print('Feature set: X')\n",
    "print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=100, max_depth=7)\n",
    "cv_results = cross_validate(rf, X_selected_40, y, cv=5)\n",
    "accuracies.append(np.mean(cv_results['test_score']))\n",
    "errors.append(1-np.mean(cv_results['test_score']))\n",
    "print('Feature set: X_selected_40')\n",
    "print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=100, max_depth=7)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "accuracies.append(np.mean(cv_results['test_score']))\n",
    "errors.append(1-np.mean(cv_results['test_score']))\n",
    "print('Feature set: X_selected_5')\n",
    "print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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J1/5yle45JJLqKur49NPP2XWrFksXLiQ2bOTZwp/9NFHTbZ1zjnn8Mwzz/DVr36VMWPGMG/evMZ1N9xwA2+99RYvvPAC5eXlfPDBBwBMmDCBSy+9FIAzzjiDhx56iDFjxvCrX/2KK664gurqpk+WWbRoERdffDEzZsxghx124Nhjj+WBBx7gpJNO4pNPPmH48OH85Cc/4bvf/S433ngjP/jBDzY45rvuuosf/ehH7LzzzowZM4bvfe97AJx++ulMnDiR0aNHs3r1aurr63n44Yd54IEHeP755+nWrVtjvVvy3HPP8dJLL9G7d29qa2u5//776dWrF8uWLWP48OGceOKJzJkzh5/85Cf86U9/ok+fPnzwwQf07NmTESNG8Lvf/Y6TTjqJKVOmcPLJJ2/2262bU1ALSNIJwCzgkXS5StLUlkuZ2bZo3bp1nHvuuQwZMoRTTjml8TrL0KFDufnmm5k0aRIvv/wyPXv25DOf+QxvvvkmF1xwAY888gi9evUqeD+PP/4448ePb+yS6t27N5C01A499FCGDBnCH//4R1555ZUWtzN9+nRGjBhB3759KS8v5/TTT+epp54CoHPnznz1q18F4JBDDmkSABssWbKEuXPn8sUvfpG9996b8vJyZs+ezYoVK1i4cCGjR48Gkt/adOvWjccff5yzzz6bbt26Nal3S4455pjGfBHB97//fQ444ACOPvpoFi5cyJIlS/jjH//ImDFj6NOnT5PtnnPOOdx8880A3HzzzY1dmVuCQltAk0jG3ZkGEBGz0pFKzawEWmqpFMv+++9f0PWXq666ip133pkXX3yR+vp6KisrATj88MN56qmn+N3vfscZZ5zBd77zHc4880xefPFFHn30Ua699lruueceJk+eXFB9ImKDu7dWr17N+eefT01NDQMGDGDSpEmt3l7c0gOZKyoqGvdRVlZGbW3tBnnuvvtuPvzww8brPsuXL2fKlCl897vfLbjeAOXl5dTX1zceR1b37t0b5++44w6WLl3KjBkzqKioYODAgaxevbrZ7X7hC19g3rx5PPnkk9TV1bXrzSKbqtBrQLUR8XFRa2JmW7Qvf/nLrFmzhhtvvLExbfr06Tz55JNN8n388cf069ePTp06cfvtt1NXVwfA22+/zU477cS5557LN77xDWbOnMmyZcuor6/n5JNP5sc//jEzZ84suD7HHnss119/fWNQ+OCDDxq/uPv06cPKlSubBMyePXuyYsWKDbZz6KGH8uSTT7Js2TLq6uq46667OOKIIwqux1133cUjjzzCvHnzmDdvHjNmzGDKlCn06tWL/v3788ADyUDPa9as4dNPP+XYY49l8uTJfPrpp431Bhg4cCAzZswAWr7R4uOPP2annXaioqKCJ554grfffhuAo446invuuYf333+/yXYBzjzzTE477bQtqvUDhQeg2ZK+DpRJ2kvSNcCzRayXmW1hJHH//ffz2GOPseeee7L//vszadKkxrvKGpx//vnceuutDB8+nNdff73x7H3atGlUVVVx0EEHcd999/GP//iPLFy4kBEjRlBVVcW4ceP46U9/WnB9zjnnHHbffffGi+533nkn22+/fWP330knncTQoUMb848bN47x48c33oTQoF+/fvz0pz/lyCOPbLxZYNSoUQXVYd68ecyfP5/hw4c3pg0aNIhevXrx/PPPc/vtt/PLX/6SAw44gM9//vO8++67HHfccZx44olUV1dTVVXFFVdcAcBFF13Eddddx+c//3mWLVvW7D5PP/10ampqqK6u5o477mDfffcFkhbqJZdcwhFHHMGBBx7IP//zPzcp8+GHH3LaaacV9uZuJgWNBySpG3AJcGya9Cjw44hYU8S6tRuPB2QdwauvvsrnPve5UlfDtkL33nsvDz74ILfffnuzefJ9vraU8YD+LiIuiYih6fQD4MTWCkk6TtJrkuZKmphn/QhJH0ualU6XtlZWUm9Jj0n6W/q6Q4HHYGa2zbnggguYOHEiP/zhD0tdlQ0UGoC+V2BaI0llwLXA8cB+wGmS9suT9emIqEqnywooOxH4Q0TsBfwhXTYzszyuueYa5s6dy957713qqmygxbvgJB0PjAR2k/TLzKpewIa3gzQ1DJgbEW+m25oCjAIKefZFS2VHASPSfLeS3Jl38YabMDOzLVlrLaBFQA2wGpiRmaYCX2ml7G7AO5nlBWlarsMkvSjpYUkN95a2VHbniFgMkL7ulG/nks6TVCOpZunSpa1U1czMNrcWW0AR8SLwoqQ7I6Ktz27I93jV3DseZgJ7RMRKSSOBB4C9Cizbooi4AbgBkpsQ2lLWzMyKr9BrQAMl3StpjqQ3G6ZWyiwAsk8o7E/SomoUEcsjYmU6/3ugQlKfVsoukdQPIH19r8BjMDOz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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_sets = [\"X\", \"X_selected40\", \"X_selected_5\"]\n",
    "plt.plot(X_sets, accuracies, label = \"Classification Accuracy\")\n",
    "plt.plot(X_sets, errors, label = \"Classification Error\")\n",
    "plt.xlabel('Feature Selected Set')\n",
    "plt.ylabel('Rate')\n",
    "plt.title(\"Random Forest - Accuracy per Feature Set\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Tune depth hyperparameter for each feature set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracies=[]\n",
    "errors=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 0.48695187662578976\n",
      "5 0.5824786324786324\n",
      "7 0.5863294314381271\n",
      "10 0.586352657004831\n",
      "15 0.5795289855072464\n",
      "20 0.5727796358231141\n",
      "0.586352657004831\n"
     ]
    }
   ],
   "source": [
    "# Feature set X\n",
    "# best: d=7, acc=58.63\n",
    "\n",
    "temp_accs=[]\n",
    "for d in [1,5,7,10,15,20]:\n",
    "    rf = RandomForestClassifier(random_state=0,n_estimators=100, max_depth=d)\n",
    "    cv_results = cross_validate(rf, X, y, cv=5)\n",
    "    temp_accs.append(np.mean(cv_results['test_score']))\n",
    "    #print(cv_results['test_score'])\n",
    "    print(d, np.mean(cv_results['test_score']))\n",
    "best_acc = max(temp_accs)\n",
    "accuracies.append(best_acc)\n",
    "errors.append(1-best_acc)\n",
    "print(best_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 0.5795336306205872\n",
      "4 0.5998049052396879\n",
      "5 0.5959587513935339\n",
      "6 0.5843970642883687\n",
      "7 0.5911557041991824\n",
      "8 0.5901895206243032\n",
      "9 0.594987922705314\n",
      "10 0.5939985135637309\n",
      "20 0.5737736900780379\n",
      "0.5998049052396879\n"
     ]
    }
   ],
   "source": [
    "# Feature set X_selected_40\n",
    "# best: d=4, acc=59.98\n",
    "\n",
    "temp_accs=[]\n",
    "for d in [3,4,5,6,7,8,9,10,20]:\n",
    "    rf = RandomForestClassifier(random_state=0,n_estimators=100, max_depth=d)\n",
    "    cv_results = cross_validate(rf, X_selected_40, y, cv=5)\n",
    "    temp_accs.append(np.mean(cv_results['test_score']))\n",
    "    #print(cv_results['test_score'])\n",
    "    print(d, np.mean(cv_results['test_score']))\n",
    "best_acc = max(temp_accs)\n",
    "accuracies.append(best_acc)\n",
    "errors.append(1-best_acc)\n",
    "print(best_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 0.5969435154217764\n",
      "6 0.5969202898550725\n",
      "7 0.6008221850613156\n",
      "8 0.5892326272761055\n",
      "9 0.5853586027499071\n",
      "0.6008221850613156\n"
     ]
    }
   ],
   "source": [
    "# Feature set X_selected_5\n",
    "# best: d=7, acc=60.08\n",
    "\n",
    "temp_accs=[]\n",
    "for d in [5,6,7,8,9]:\n",
    "    rf = RandomForestClassifier(random_state=0,n_estimators=100, max_depth=d)\n",
    "    cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "    temp_accs.append(np.mean(cv_results['test_score']))\n",
    "    #print(cv_results['test_score'])\n",
    "    print(d, np.mean(cv_results['test_score']))\n",
    "best_acc = max(temp_accs)\n",
    "accuracies.append(best_acc)\n",
    "errors.append(1-best_acc)\n",
    "print(best_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_sets = [\"X\", \"X_selected40\", \"X_selected_5\"]\n",
    "plt.plot(X_sets, accuracies, label = \"Classification Accuracy\")\n",
    "plt.plot(X_sets, errors, label = \"Classification Error\")\n",
    "plt.xlabel('Feature Selected Set')\n",
    "plt.ylabel('Rate')\n",
    "plt.title(\"Random Forest w/Tuned Max Depth - Accuracy per Feature Set\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model with the best accuracy has feature set X_selected_5 and max_depth=7. Accuracy = 0.6008221850613156"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Focus in on X_selected_5 model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000 0.6027220364176886\n",
      "10000 0.5998467112597548\n",
      "100 0.6008221850613156\n"
     ]
    }
   ],
   "source": [
    "#experiment with n_estimators\n",
    "#best: n_estimators=10000, acc=0.6027220364176886\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=10000,max_depth=7)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(10000, np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=1000,max_depth=7)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(10000, np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=100,max_depth=7)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(100, np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 0.6008221850613156\n",
      "2 0.6056159420289855\n",
      "3 0.5998141954663694\n",
      "4 0.5998234856930509\n",
      "5 0.6046497584541063\n",
      "6 0.595958751393534\n",
      "7 0.5901755852842809\n",
      "8 0.6027220364176886\n",
      "9 0.6065774804905241\n",
      "10 0.5969388703084355\n"
     ]
    }
   ],
   "source": [
    "#experiment with min_samples_leaf\n",
    "#best: min_samples_leaf=9, acc=0.6065774804905241\n",
    "\n",
    "for l in [1,2,3,4,5,6,7,8,9,10]:\n",
    "    rf = RandomForestClassifier(random_state=0,n_estimators=100,max_depth=7,min_samples_leaf=l)\n",
    "    cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "    #print(cv_results['test_score'])\n",
    "    print(l, np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 0.6008221850613156\n",
      "3 0.6056159420289855\n",
      "4 0.5959866220735786\n",
      "5 0.6017465626161279\n",
      "6 0.6046636937941287\n",
      "7 0.5959587513935339\n",
      "8 0.5930787811222594\n",
      "9 0.6027220364176886\n",
      "10 0.5998374210330732\n"
     ]
    }
   ],
   "source": [
    "#experiment with min_samples_split\n",
    "#best: min_samples_split=3, acc=0.6056159420289855\n",
    "\n",
    "for s in [2,3,4,5,6,7,8,9,10]:\n",
    "    rf = RandomForestClassifier(random_state=0,n_estimators=100,max_depth=7,min_samples_split=s)\n",
    "    cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "    #print(cv_results['test_score'])\n",
    "    print(s, np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000 0.6007896692679302\n",
      "1000 0.6027266815310293\n",
      "100 0.6056159420289855\n"
     ]
    }
   ],
   "source": [
    "#experiment with n_estimators given min_samples_split=3\n",
    "#best: n_est=100, acc=0.6056159420289855\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=10000,max_depth=7,min_samples_split=3)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(10000, np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=1000,max_depth=7,min_samples_split=3)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(1000, np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=100,max_depth=7,min_samples_split=3)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(100, np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100000 0.5921079524340394\n",
      "100 0.6065774804905241\n"
     ]
    }
   ],
   "source": [
    "#experiment with n_estimators given min_samples_leaf=9\n",
    "#best: n_est=100, acc=0.6065774804905241\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=10000,max_depth=7,min_samples_leaf=9)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(100000, np.mean(cv_results['test_score']))\n",
    "\n",
    "rf = RandomForestClassifier(random_state=0,n_estimators=100,max_depth=7,min_samples_leaf=9)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(100, np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model with X_selected_5 and max_depth=7 has the best accuracy when n_estimators=100 and min_samples_leaf=9. Accuracy = 0.6065774804905241"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.537142326272761\n"
     ]
    }
   ],
   "source": [
    "#feature set X\n",
    "\n",
    "boost = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=7, random_state=0)\n",
    "cv_results = cross_validate(boost, X, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5689288368636195\n"
     ]
    }
   ],
   "source": [
    "#feature set X_selected_40\n",
    "\n",
    "boost = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=7, random_state=0)\n",
    "cv_results = cross_validate(boost, X_selected_40, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5641583054626533\n"
     ]
    }
   ],
   "source": [
    "#feature set X_selected_40 and max_leaf_nodes=80\n",
    "\n",
    "boost = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=7, random_state=0, max_leaf_nodes=80)\n",
    "cv_results = cross_validate(boost, X_selected_40, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6007385730211816\n"
     ]
    }
   ],
   "source": [
    "svm = make_pipeline(StandardScaler(), SVC(gamma='auto',kernel='sigmoid'))\n",
    "cv_results = cross_validate(svm, X_selected_40, y, cv=5)\n",
    "#print(cv_results['test_score'])\n",
    "print(np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Best Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN (Accuracy = 0.5747166480862133)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X_selected_5\n",
      "Optimal k:  {'n_neighbors': 17}\n",
      "Mean score:  0.5747166480862133\n"
     ]
    }
   ],
   "source": [
    "knn = neighbors.KNeighborsClassifier() \n",
    "param_grid = {'n_neighbors': np.arange(1, 51)} \n",
    "knn_gscv = GridSearchCV(knn, param_grid, cv=5) \n",
    "knn_gscv.fit(X_selected_5, y) #fit model to data\n",
    "\n",
    "print('Feature set: X_selected_5')\n",
    "print('Optimal k: ',knn_gscv.best_params_) #top performing k\n",
    "print('Mean score: ',knn_gscv.best_score_) #mean score for the top performing k"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression (Accuracy = 0.5853353771832033)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X_selected_5\n",
      "Optimal C:  {'C': 1.0}\n",
      "Mean score:  0.5853353771832033\n"
     ]
    }
   ],
   "source": [
    "c_values = [0.1, 1.0, 10]\n",
    "logreg = LogisticRegression(random_state=0, solver='lbfgs', multi_class='ovr', max_iter=1000)\n",
    "param_grid = dict(C=c_values)\n",
    "logreg_gscv = GridSearchCV(logreg, param_grid, cv=5)\n",
    "logreg_gscv.fit(X_selected_5, y) #fit model to data\n",
    "\n",
    "print('Feature set: X_selected_5')\n",
    "print('Optimal C: ',logreg_gscv.best_params_) # top performing C\n",
    "print('Mean score: ',logreg_gscv.best_score_) # mean score for the top performing C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest (Accuracy = 0.6065774804905241)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X_selected_5\n",
      "Optimal n_estimators=100, max_depth=7, min_samples_leaf=9\n",
      "Mean score:  0.6065774804905241\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(random_state=0,n_estimators=100,max_depth=7,min_samples_leaf=9)\n",
    "cv_results = cross_validate(rf, X_selected_5, y, cv=5)\n",
    "\n",
    "print('Feature set: X_selected_5')\n",
    "print('Optimal n_estimators=100, max_depth=7, min_samples_leaf=9')\n",
    "print('Mean score: ',np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM (Accuracy = 0.6007385730211816)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X_selected_40\n",
      "Mean score:  0.6007385730211816\n"
     ]
    }
   ],
   "source": [
    "svm = make_pipeline(StandardScaler(), SVC(gamma='auto',kernel='sigmoid'))\n",
    "cv_results = cross_validate(svm, X_selected_40, y, cv=5)\n",
    "\n",
    "print('Feature set: X_selected_40')\n",
    "print('Mean score: ',np.mean(cv_results['test_score']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Boosting (Accuracy = 0.5689288368636195)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set: X_selected_40\n",
      "Optimal n_estimators=100, max_depth=7\n",
      "Mean score:  0.5689288368636195\n"
     ]
    }
   ],
   "source": [
    "boost = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=7, random_state=0)\n",
    "cv_results = cross_validate(boost, X_selected_40, y, cv=5)\n",
    "\n",
    "print('Feature set: X_selected_40')\n",
    "print('Optimal n_estimators=100, max_depth=7')\n",
    "print('Mean score: ',np.mean(cv_results['test_score']))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
